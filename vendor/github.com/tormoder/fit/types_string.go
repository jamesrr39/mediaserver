// Code generated by "stringer -trimprefix -type ActivityClass,ActivityLevel,ActivityMode,ActivitySubtype,ActivityType,AnalogWatchfaceLayout,AntNetwork,AntplusDeviceType,AttitudeStage,AttitudeValidity,AutoActivityDetect,AutoSyncFrequency,AutolapTrigger,Autoscroll,BacklightMode,BatteryStatus,BikeLightBeamAngleMode,BikeLightNetworkConfigType,BodyLocation,BpStatus,CameraEventType,CameraOrientationType,Checksum,CommTimeoutType,ConnectivityCapabilities,CourseCapabilities,CoursePoint,DateMode,DayOfWeek,DeviceIndex,DigitalWatchfaceLayout,DisplayHeart,DisplayMeasure,DisplayOrientation,DisplayPosition,DisplayPower,Event,EventType,ExdDataUnits,ExdDescriptors,ExdDisplayType,ExdLayout,ExdQualifiers,FileFlags,FileType,FitBaseType,FitBaseUnit,FitnessEquipmentState,GarminProduct,Gender,Goal,GoalRecurrence,GoalSource,HrType,HrZoneCalc,Intensity,Language,LanguageBits0,LanguageBits1,LanguageBits2,LanguageBits3,LanguageBits4,LapTrigger,LeftRightBalance,LeftRightBalance100,LengthType,LocaltimeIntoDay,Manufacturer,MesgCount,MesgNum,MessageIndex,PowerPhaseType,PwrZoneCalc,RiderPositionType,Schedule,SegmentDeleteStatus,SegmentLapStatus,SegmentLeaderboardType,SegmentSelectionType,SensorType,SessionTrigger,Side,SourceType,Sport,SportBits0,SportBits1,SportBits2,SportBits3,SportBits4,SportBits5,SportBits6,SportEvent,StrokeType,SubSport,SupportedExdScreenLayouts,SwimStroke,Switch,TimeIntoDay,TimeMode,TimeZone,TimerTrigger,TurnType,UserLocalId,WatchfaceMode,WeatherReport,WeatherSevereType,WeatherSeverity,WeatherStatus,Weight,WktStepDuration,WktStepTarget,WorkoutCapabilities,WorkoutEquipment,WorkoutHr,WorkoutPower -output /home/tormod/src/github.com/tormoder/fit/types_string.go /home/tormod/src/github.com/tormoder/fit"; DO NOT EDIT.

package fit

import "fmt"

const (
	_ActivityClass_name_0 = "LevelMax"
	_ActivityClass_name_1 = "LevelAthlete"
	_ActivityClass_name_2 = "Invalid"
)

var (
	_ActivityClass_index_0 = [...]uint8{0, 8}
	_ActivityClass_index_1 = [...]uint8{0, 5, 12}
	_ActivityClass_index_2 = [...]uint8{0, 7}
)

func (i ActivityClass) String() string {
	switch {
	case i == 100:
		return _ActivityClass_name_0
	case 127 <= i && i <= 128:
		i -= 127
		return _ActivityClass_name_1[_ActivityClass_index_1[i]:_ActivityClass_index_1[i+1]]
	case i == 255:
		return _ActivityClass_name_2
	default:
		return fmt.Sprintf("ActivityClass(%d)", i)
	}
}

const (
	_ActivityLevel_name_0 = "LowMediumHigh"
	_ActivityLevel_name_1 = "Invalid"
)

var (
	_ActivityLevel_index_0 = [...]uint8{0, 3, 9, 13}
	_ActivityLevel_index_1 = [...]uint8{0, 7}
)

func (i ActivityLevel) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _ActivityLevel_name_0[_ActivityLevel_index_0[i]:_ActivityLevel_index_0[i+1]]
	case i == 255:
		return _ActivityLevel_name_1
	default:
		return fmt.Sprintf("ActivityLevel(%d)", i)
	}
}

const (
	_ActivityMode_name_0 = "ManualAutoMultiSport"
	_ActivityMode_name_1 = "Invalid"
)

var (
	_ActivityMode_index_0 = [...]uint8{0, 6, 20}
	_ActivityMode_index_1 = [...]uint8{0, 7}
)

func (i ActivityMode) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _ActivityMode_name_0[_ActivityMode_index_0[i]:_ActivityMode_index_0[i+1]]
	case i == 255:
		return _ActivityMode_name_1
	default:
		return fmt.Sprintf("ActivityMode(%d)", i)
	}
}

const (
	_ActivitySubtype_name_0 = "GenericTreadmillStreetTrailTrackSpinIndoorCyclingRoadMountainDownhillRecumbentCyclocrossHandCyclingTrackCyclingIndoorRowingEllipticalStairClimbingLapSwimmingOpenWater"
	_ActivitySubtype_name_1 = "AllInvalid"
)

var (
	_ActivitySubtype_index_0 = [...]uint8{0, 7, 16, 22, 27, 32, 36, 49, 53, 61, 69, 78, 88, 99, 111, 123, 133, 146, 157, 166}
	_ActivitySubtype_index_1 = [...]uint8{0, 3, 10}
)

func (i ActivitySubtype) String() string {
	switch {
	case 0 <= i && i <= 18:
		return _ActivitySubtype_name_0[_ActivitySubtype_index_0[i]:_ActivitySubtype_index_0[i+1]]
	case 254 <= i && i <= 255:
		i -= 254
		return _ActivitySubtype_name_1[_ActivitySubtype_index_1[i]:_ActivitySubtype_index_1[i+1]]
	default:
		return fmt.Sprintf("ActivitySubtype(%d)", i)
	}
}

const (
	_ActivityType_name_0 = "GenericRunningCyclingTransitionFitnessEquipmentSwimmingWalking"
	_ActivityType_name_1 = "Sedentary"
	_ActivityType_name_2 = "AllInvalid"
)

var (
	_ActivityType_index_0 = [...]uint8{0, 7, 14, 21, 31, 47, 55, 62}
	_ActivityType_index_1 = [...]uint8{0, 9}
	_ActivityType_index_2 = [...]uint8{0, 3, 10}
)

func (i ActivityType) String() string {
	switch {
	case 0 <= i && i <= 6:
		return _ActivityType_name_0[_ActivityType_index_0[i]:_ActivityType_index_0[i+1]]
	case i == 8:
		return _ActivityType_name_1
	case 254 <= i && i <= 255:
		i -= 254
		return _ActivityType_name_2[_ActivityType_index_2[i]:_ActivityType_index_2[i+1]]
	default:
		return fmt.Sprintf("ActivityType(%d)", i)
	}
}

const (
	_AnalogWatchfaceLayout_name_0 = "MinimalTraditionalModern"
	_AnalogWatchfaceLayout_name_1 = "Invalid"
)

var (
	_AnalogWatchfaceLayout_index_0 = [...]uint8{0, 7, 18, 24}
	_AnalogWatchfaceLayout_index_1 = [...]uint8{0, 7}
)

func (i AnalogWatchfaceLayout) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _AnalogWatchfaceLayout_name_0[_AnalogWatchfaceLayout_index_0[i]:_AnalogWatchfaceLayout_index_0[i+1]]
	case i == 255:
		return _AnalogWatchfaceLayout_name_1
	default:
		return fmt.Sprintf("AnalogWatchfaceLayout(%d)", i)
	}
}

const (
	_AntNetwork_name_0 = "PublicAntplusAntfsPrivate"
	_AntNetwork_name_1 = "Invalid"
)

var (
	_AntNetwork_index_0 = [...]uint8{0, 6, 13, 18, 25}
	_AntNetwork_index_1 = [...]uint8{0, 7}
)

func (i AntNetwork) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _AntNetwork_name_0[_AntNetwork_index_0[i]:_AntNetwork_index_0[i+1]]
	case i == 255:
		return _AntNetwork_name_1
	default:
		return fmt.Sprintf("AntNetwork(%d)", i)
	}
}

const (
	_AntplusDeviceType_name_0 = "Antfs"
	_AntplusDeviceType_name_1 = "BikePowerEnvironmentSensorLegacy"
	_AntplusDeviceType_name_2 = "MultiSportSpeedDistanceControlFitnessEquipmentBloodPressureGeocacheNodeLightElectricVehicle"
	_AntplusDeviceType_name_3 = "EnvSensorRacquetControlHub"
	_AntplusDeviceType_name_4 = "MuscleOxygen"
	_AntplusDeviceType_name_5 = "BikeLightMainBikeLightShared"
	_AntplusDeviceType_name_6 = "Exd"
	_AntplusDeviceType_name_7 = "BikeRadar"
	_AntplusDeviceType_name_8 = "WeightScaleHeartRateBikeSpeedCadenceBikeCadenceBikeSpeedStrideSpeedDistance"
	_AntplusDeviceType_name_9 = "Invalid"
)

var (
	_AntplusDeviceType_index_0 = [...]uint8{0, 5}
	_AntplusDeviceType_index_1 = [...]uint8{0, 9, 32}
	_AntplusDeviceType_index_2 = [...]uint8{0, 23, 30, 46, 59, 71, 91}
	_AntplusDeviceType_index_3 = [...]uint8{0, 9, 16, 26}
	_AntplusDeviceType_index_4 = [...]uint8{0, 12}
	_AntplusDeviceType_index_5 = [...]uint8{0, 13, 28}
	_AntplusDeviceType_index_6 = [...]uint8{0, 3}
	_AntplusDeviceType_index_7 = [...]uint8{0, 9}
	_AntplusDeviceType_index_8 = [...]uint8{0, 11, 20, 36, 47, 56, 75}
	_AntplusDeviceType_index_9 = [...]uint8{0, 7}
)

func (i AntplusDeviceType) String() string {
	switch {
	case i == 1:
		return _AntplusDeviceType_name_0
	case 11 <= i && i <= 12:
		i -= 11
		return _AntplusDeviceType_name_1[_AntplusDeviceType_index_1[i]:_AntplusDeviceType_index_1[i+1]]
	case 15 <= i && i <= 20:
		i -= 15
		return _AntplusDeviceType_name_2[_AntplusDeviceType_index_2[i]:_AntplusDeviceType_index_2[i+1]]
	case 25 <= i && i <= 27:
		i -= 25
		return _AntplusDeviceType_name_3[_AntplusDeviceType_index_3[i]:_AntplusDeviceType_index_3[i+1]]
	case i == 31:
		return _AntplusDeviceType_name_4
	case 35 <= i && i <= 36:
		i -= 35
		return _AntplusDeviceType_name_5[_AntplusDeviceType_index_5[i]:_AntplusDeviceType_index_5[i+1]]
	case i == 38:
		return _AntplusDeviceType_name_6
	case i == 40:
		return _AntplusDeviceType_name_7
	case 119 <= i && i <= 124:
		i -= 119
		return _AntplusDeviceType_name_8[_AntplusDeviceType_index_8[i]:_AntplusDeviceType_index_8[i+1]]
	case i == 255:
		return _AntplusDeviceType_name_9
	default:
		return fmt.Sprintf("AntplusDeviceType(%d)", i)
	}
}

const (
	_AttitudeStage_name_0 = "FailedAligningDegradedValid"
	_AttitudeStage_name_1 = "Invalid"
)

var (
	_AttitudeStage_index_0 = [...]uint8{0, 6, 14, 22, 27}
	_AttitudeStage_index_1 = [...]uint8{0, 7}
)

func (i AttitudeStage) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _AttitudeStage_name_0[_AttitudeStage_index_0[i]:_AttitudeStage_index_0[i+1]]
	case i == 255:
		return _AttitudeStage_name_1
	default:
		return fmt.Sprintf("AttitudeStage(%d)", i)
	}
}

const _AttitudeValidity_name = "TrackAngleHeadingValidPitchValidRollValidLateralBodyAccelValidNormalBodyAccelValidTurnRateValidHwFailMagInvalidNoGpsGpsInvalidSolutionCoastingTrueTrackAngleMagneticHeadingInvalid"

var _AttitudeValidity_map = map[AttitudeValidity]string{
	1:     _AttitudeValidity_name[0:22],
	2:     _AttitudeValidity_name[22:32],
	4:     _AttitudeValidity_name[32:41],
	8:     _AttitudeValidity_name[41:62],
	16:    _AttitudeValidity_name[62:82],
	32:    _AttitudeValidity_name[82:95],
	64:    _AttitudeValidity_name[95:101],
	128:   _AttitudeValidity_name[101:111],
	256:   _AttitudeValidity_name[111:116],
	512:   _AttitudeValidity_name[116:126],
	1024:  _AttitudeValidity_name[126:142],
	2048:  _AttitudeValidity_name[142:156],
	4096:  _AttitudeValidity_name[156:171],
	65535: _AttitudeValidity_name[171:178],
}

func (i AttitudeValidity) String() string {
	if str, ok := _AttitudeValidity_map[i]; ok {
		return str
	}
	return fmt.Sprintf("AttitudeValidity(%d)", i)
}

const (
	_AutoActivityDetect_name_0 = "NoneRunningCycling"
	_AutoActivityDetect_name_1 = "Swimming"
	_AutoActivityDetect_name_2 = "Walking"
	_AutoActivityDetect_name_3 = "Elliptical"
	_AutoActivityDetect_name_4 = "Sedentary"
	_AutoActivityDetect_name_5 = "Invalid"
)

var (
	_AutoActivityDetect_index_0 = [...]uint8{0, 4, 11, 18}
	_AutoActivityDetect_index_1 = [...]uint8{0, 8}
	_AutoActivityDetect_index_2 = [...]uint8{0, 7}
	_AutoActivityDetect_index_3 = [...]uint8{0, 10}
	_AutoActivityDetect_index_4 = [...]uint8{0, 9}
	_AutoActivityDetect_index_5 = [...]uint8{0, 7}
)

func (i AutoActivityDetect) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _AutoActivityDetect_name_0[_AutoActivityDetect_index_0[i]:_AutoActivityDetect_index_0[i+1]]
	case i == 4:
		return _AutoActivityDetect_name_1
	case i == 8:
		return _AutoActivityDetect_name_2
	case i == 32:
		return _AutoActivityDetect_name_3
	case i == 1024:
		return _AutoActivityDetect_name_4
	case i == 4294967295:
		return _AutoActivityDetect_name_5
	default:
		return fmt.Sprintf("AutoActivityDetect(%d)", i)
	}
}

const (
	_AutoSyncFrequency_name_0 = "NeverOccasionallyFrequentOnceADayRemote"
	_AutoSyncFrequency_name_1 = "Invalid"
)

var (
	_AutoSyncFrequency_index_0 = [...]uint8{0, 5, 17, 25, 33, 39}
	_AutoSyncFrequency_index_1 = [...]uint8{0, 7}
)

func (i AutoSyncFrequency) String() string {
	switch {
	case 0 <= i && i <= 4:
		return _AutoSyncFrequency_name_0[_AutoSyncFrequency_index_0[i]:_AutoSyncFrequency_index_0[i+1]]
	case i == 255:
		return _AutoSyncFrequency_name_1
	default:
		return fmt.Sprintf("AutoSyncFrequency(%d)", i)
	}
}

const (
	_AutolapTrigger_name_0 = "TimeDistancePositionStartPositionLapPositionWaypointPositionMarkedOff"
	_AutolapTrigger_name_1 = "Invalid"
)

var (
	_AutolapTrigger_index_0 = [...]uint8{0, 4, 12, 25, 36, 52, 66, 69}
	_AutolapTrigger_index_1 = [...]uint8{0, 7}
)

func (i AutolapTrigger) String() string {
	switch {
	case 0 <= i && i <= 6:
		return _AutolapTrigger_name_0[_AutolapTrigger_index_0[i]:_AutolapTrigger_index_0[i+1]]
	case i == 255:
		return _AutolapTrigger_name_1
	default:
		return fmt.Sprintf("AutolapTrigger(%d)", i)
	}
}

const (
	_Autoscroll_name_0 = "NoneSlowMediumFast"
	_Autoscroll_name_1 = "Invalid"
)

var (
	_Autoscroll_index_0 = [...]uint8{0, 4, 8, 14, 18}
	_Autoscroll_index_1 = [...]uint8{0, 7}
)

func (i Autoscroll) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _Autoscroll_name_0[_Autoscroll_index_0[i]:_Autoscroll_index_0[i+1]]
	case i == 255:
		return _Autoscroll_name_1
	default:
		return fmt.Sprintf("Autoscroll(%d)", i)
	}
}

const (
	_BacklightMode_name_0 = "OffManualKeyAndMessagesAutoBrightnessSmartNotificationsKeyAndMessagesNightKeyAndMessagesAndSmartNotifications"
	_BacklightMode_name_1 = "Invalid"
)

var (
	_BacklightMode_index_0 = [...]uint8{0, 3, 9, 23, 37, 55, 74, 109}
	_BacklightMode_index_1 = [...]uint8{0, 7}
)

func (i BacklightMode) String() string {
	switch {
	case 0 <= i && i <= 6:
		return _BacklightMode_name_0[_BacklightMode_index_0[i]:_BacklightMode_index_0[i+1]]
	case i == 255:
		return _BacklightMode_name_1
	default:
		return fmt.Sprintf("BacklightMode(%d)", i)
	}
}

const (
	_BatteryStatus_name_0 = "NewGoodOkLowCriticalChargingUnknown"
	_BatteryStatus_name_1 = "Invalid"
)

var (
	_BatteryStatus_index_0 = [...]uint8{0, 3, 7, 9, 12, 20, 28, 35}
	_BatteryStatus_index_1 = [...]uint8{0, 7}
)

func (i BatteryStatus) String() string {
	switch {
	case 1 <= i && i <= 7:
		i -= 1
		return _BatteryStatus_name_0[_BatteryStatus_index_0[i]:_BatteryStatus_index_0[i+1]]
	case i == 255:
		return _BatteryStatus_name_1
	default:
		return fmt.Sprintf("BatteryStatus(%d)", i)
	}
}

const (
	_BikeLightBeamAngleMode_name_0 = "ManualAuto"
	_BikeLightBeamAngleMode_name_1 = "Invalid"
)

var (
	_BikeLightBeamAngleMode_index_0 = [...]uint8{0, 6, 10}
	_BikeLightBeamAngleMode_index_1 = [...]uint8{0, 7}
)

func (i BikeLightBeamAngleMode) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _BikeLightBeamAngleMode_name_0[_BikeLightBeamAngleMode_index_0[i]:_BikeLightBeamAngleMode_index_0[i+1]]
	case i == 255:
		return _BikeLightBeamAngleMode_name_1
	default:
		return fmt.Sprintf("BikeLightBeamAngleMode(%d)", i)
	}
}

const (
	_BikeLightNetworkConfigType_name_0 = "Auto"
	_BikeLightNetworkConfigType_name_1 = "IndividualHighVisibilityTrail"
	_BikeLightNetworkConfigType_name_2 = "Invalid"
)

var (
	_BikeLightNetworkConfigType_index_0 = [...]uint8{0, 4}
	_BikeLightNetworkConfigType_index_1 = [...]uint8{0, 10, 24, 29}
	_BikeLightNetworkConfigType_index_2 = [...]uint8{0, 7}
)

func (i BikeLightNetworkConfigType) String() string {
	switch {
	case i == 0:
		return _BikeLightNetworkConfigType_name_0
	case 4 <= i && i <= 6:
		i -= 4
		return _BikeLightNetworkConfigType_name_1[_BikeLightNetworkConfigType_index_1[i]:_BikeLightNetworkConfigType_index_1[i+1]]
	case i == 255:
		return _BikeLightNetworkConfigType_name_2
	default:
		return fmt.Sprintf("BikeLightNetworkConfigType(%d)", i)
	}
}

const (
	_BodyLocation_name_0 = "LeftLegLeftCalfLeftShinLeftHamstringLeftQuadLeftGluteRightLegRightCalfRightShinRightHamstringRightQuadRightGluteTorsoBackLeftLowerBackLeftUpperBackRightLowerBackRightUpperBackTorsoFrontLeftAbdomenLeftChestRightAbdomenRightChestLeftArmLeftShoulderLeftBicepLeftTricepLeftBrachioradialisLeftForearmExtensorsRightArmRightShoulderRightBicepRightTricepRightBrachioradialisRightForearmExtensorsNeckThroatWaistMidBackWaistFrontWaistLeftWaistRight"
	_BodyLocation_name_1 = "Invalid"
)

var (
	_BodyLocation_index_0 = [...]uint16{0, 7, 15, 23, 36, 44, 53, 61, 70, 79, 93, 102, 112, 121, 134, 147, 161, 175, 185, 196, 205, 217, 227, 234, 246, 255, 265, 284, 304, 312, 325, 335, 346, 366, 387, 391, 397, 409, 419, 428, 438}
	_BodyLocation_index_1 = [...]uint8{0, 7}
)

func (i BodyLocation) String() string {
	switch {
	case 0 <= i && i <= 39:
		return _BodyLocation_name_0[_BodyLocation_index_0[i]:_BodyLocation_index_0[i+1]]
	case i == 255:
		return _BodyLocation_name_1
	default:
		return fmt.Sprintf("BodyLocation(%d)", i)
	}
}

const (
	_BpStatus_name_0 = "NoErrorErrorIncompleteDataErrorNoMeasurementErrorDataOutOfRangeErrorIrregularHeartRate"
	_BpStatus_name_1 = "Invalid"
)

var (
	_BpStatus_index_0 = [...]uint8{0, 7, 26, 44, 63, 86}
	_BpStatus_index_1 = [...]uint8{0, 7}
)

func (i BpStatus) String() string {
	switch {
	case 0 <= i && i <= 4:
		return _BpStatus_name_0[_BpStatus_index_0[i]:_BpStatus_index_0[i+1]]
	case i == 255:
		return _BpStatus_name_1
	default:
		return fmt.Sprintf("BpStatus(%d)", i)
	}
}

const (
	_CameraEventType_name_0 = "VideoStartVideoSplitVideoEndPhotoTakenVideoSecondStreamStartVideoSecondStreamSplitVideoSecondStreamEndVideoSplitStartVideoSecondStreamSplitStart"
	_CameraEventType_name_1 = "VideoPauseVideoSecondStreamPauseVideoResumeVideoSecondStreamResume"
	_CameraEventType_name_2 = "Invalid"
)

var (
	_CameraEventType_index_0 = [...]uint8{0, 10, 20, 28, 38, 60, 82, 102, 117, 144}
	_CameraEventType_index_1 = [...]uint8{0, 10, 32, 43, 66}
	_CameraEventType_index_2 = [...]uint8{0, 7}
)

func (i CameraEventType) String() string {
	switch {
	case 0 <= i && i <= 8:
		return _CameraEventType_name_0[_CameraEventType_index_0[i]:_CameraEventType_index_0[i+1]]
	case 11 <= i && i <= 14:
		i -= 11
		return _CameraEventType_name_1[_CameraEventType_index_1[i]:_CameraEventType_index_1[i+1]]
	case i == 255:
		return _CameraEventType_name_2
	default:
		return fmt.Sprintf("CameraEventType(%d)", i)
	}
}

const (
	_CameraOrientationType_name_0 = "CameraOrientation0CameraOrientation90CameraOrientation180CameraOrientation270"
	_CameraOrientationType_name_1 = "Invalid"
)

var (
	_CameraOrientationType_index_0 = [...]uint8{0, 18, 37, 57, 77}
	_CameraOrientationType_index_1 = [...]uint8{0, 7}
)

func (i CameraOrientationType) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _CameraOrientationType_name_0[_CameraOrientationType_index_0[i]:_CameraOrientationType_index_0[i+1]]
	case i == 255:
		return _CameraOrientationType_name_1
	default:
		return fmt.Sprintf("CameraOrientationType(%d)", i)
	}
}

const (
	_Checksum_name_0 = "ClearOk"
	_Checksum_name_1 = "Invalid"
)

var (
	_Checksum_index_0 = [...]uint8{0, 5, 7}
	_Checksum_index_1 = [...]uint8{0, 7}
)

func (i Checksum) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _Checksum_name_0[_Checksum_index_0[i]:_Checksum_index_0[i+1]]
	case i == 255:
		return _Checksum_name_1
	default:
		return fmt.Sprintf("Checksum(%d)", i)
	}
}

const (
	_CommTimeoutType_name_0 = "WildcardPairingTimeoutPairingTimeoutConnectionLostConnectionTimeout"
	_CommTimeoutType_name_1 = "Invalid"
)

var (
	_CommTimeoutType_index_0 = [...]uint8{0, 22, 36, 50, 67}
	_CommTimeoutType_index_1 = [...]uint8{0, 7}
)

func (i CommTimeoutType) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _CommTimeoutType_name_0[_CommTimeoutType_index_0[i]:_CommTimeoutType_index_0[i+1]]
	case i == 65535:
		return _CommTimeoutType_name_1
	default:
		return fmt.Sprintf("CommTimeoutType(%d)", i)
	}
}

const _ConnectivityCapabilities_name = "InvalidBluetoothBluetoothLeAntActivityUploadCourseDownloadWorkoutDownloadLiveTrackWeatherConditionsWeatherAlertsGpsEphemerisDownloadExplicitArchiveSetupIncompleteContinueSyncAfterSoftwareUpdateConnectIqAppDownloadGolfCourseDownloadDeviceInitiatesSyncConnectIqWatchAppDownloadConnectIqWidgetDownloadConnectIqWatchFaceDownloadConnectIqDataFieldDownloadConnectIqAppManagmentSwingSensorSwingSensorRemoteIncidentDetectionAudioPromptsWifiVerificationTrueUpFindMyWatchRemoteManualSyncLiveTrackAutoStartLiveTrackMessagingInstantInput"

var _ConnectivityCapabilities_map = map[ConnectivityCapabilities]string{
	0:          _ConnectivityCapabilities_name[0:7],
	1:          _ConnectivityCapabilities_name[7:16],
	2:          _ConnectivityCapabilities_name[16:27],
	4:          _ConnectivityCapabilities_name[27:30],
	8:          _ConnectivityCapabilities_name[30:44],
	16:         _ConnectivityCapabilities_name[44:58],
	32:         _ConnectivityCapabilities_name[58:73],
	64:         _ConnectivityCapabilities_name[73:82],
	128:        _ConnectivityCapabilities_name[82:99],
	256:        _ConnectivityCapabilities_name[99:112],
	512:        _ConnectivityCapabilities_name[112:132],
	1024:       _ConnectivityCapabilities_name[132:147],
	2048:       _ConnectivityCapabilities_name[147:162],
	4096:       _ConnectivityCapabilities_name[162:193],
	8192:       _ConnectivityCapabilities_name[193:213],
	16384:      _ConnectivityCapabilities_name[213:231],
	32768:      _ConnectivityCapabilities_name[231:250],
	65536:      _ConnectivityCapabilities_name[250:275],
	131072:     _ConnectivityCapabilities_name[275:298],
	262144:     _ConnectivityCapabilities_name[298:324],
	524288:     _ConnectivityCapabilities_name[324:350],
	1048576:    _ConnectivityCapabilities_name[350:371],
	2097152:    _ConnectivityCapabilities_name[371:382],
	4194304:    _ConnectivityCapabilities_name[382:399],
	8388608:    _ConnectivityCapabilities_name[399:416],
	16777216:   _ConnectivityCapabilities_name[416:428],
	33554432:   _ConnectivityCapabilities_name[428:444],
	67108864:   _ConnectivityCapabilities_name[444:450],
	134217728:  _ConnectivityCapabilities_name[450:461],
	268435456:  _ConnectivityCapabilities_name[461:477],
	536870912:  _ConnectivityCapabilities_name[477:495],
	1073741824: _ConnectivityCapabilities_name[495:513],
	2147483648: _ConnectivityCapabilities_name[513:525],
}

func (i ConnectivityCapabilities) String() string {
	if str, ok := _ConnectivityCapabilities_map[i]; ok {
		return str
	}
	return fmt.Sprintf("ConnectivityCapabilities(%d)", i)
}

const (
	_CourseCapabilities_name_0 = "InvalidProcessedValid"
	_CourseCapabilities_name_1 = "Time"
	_CourseCapabilities_name_2 = "Distance"
	_CourseCapabilities_name_3 = "Position"
	_CourseCapabilities_name_4 = "HeartRate"
	_CourseCapabilities_name_5 = "Power"
	_CourseCapabilities_name_6 = "Cadence"
	_CourseCapabilities_name_7 = "Training"
	_CourseCapabilities_name_8 = "Navigation"
	_CourseCapabilities_name_9 = "Bikeway"
)

var (
	_CourseCapabilities_index_0 = [...]uint8{0, 7, 16, 21}
	_CourseCapabilities_index_1 = [...]uint8{0, 4}
	_CourseCapabilities_index_2 = [...]uint8{0, 8}
	_CourseCapabilities_index_3 = [...]uint8{0, 8}
	_CourseCapabilities_index_4 = [...]uint8{0, 9}
	_CourseCapabilities_index_5 = [...]uint8{0, 5}
	_CourseCapabilities_index_6 = [...]uint8{0, 7}
	_CourseCapabilities_index_7 = [...]uint8{0, 8}
	_CourseCapabilities_index_8 = [...]uint8{0, 10}
	_CourseCapabilities_index_9 = [...]uint8{0, 7}
)

func (i CourseCapabilities) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _CourseCapabilities_name_0[_CourseCapabilities_index_0[i]:_CourseCapabilities_index_0[i+1]]
	case i == 4:
		return _CourseCapabilities_name_1
	case i == 8:
		return _CourseCapabilities_name_2
	case i == 16:
		return _CourseCapabilities_name_3
	case i == 32:
		return _CourseCapabilities_name_4
	case i == 64:
		return _CourseCapabilities_name_5
	case i == 128:
		return _CourseCapabilities_name_6
	case i == 256:
		return _CourseCapabilities_name_7
	case i == 512:
		return _CourseCapabilities_name_8
	case i == 1024:
		return _CourseCapabilities_name_9
	default:
		return fmt.Sprintf("CourseCapabilities(%d)", i)
	}
}

const (
	_CoursePoint_name_0 = "GenericSummitValleyWaterFoodDangerLeftRightStraightFirstAidFourthCategoryThirdCategorySecondCategoryFirstCategoryHorsCategorySprintLeftForkRightForkMiddleForkSlightLeftSharpLeftSlightRightSharpRightUTurnSegmentStartSegmentEnd"
	_CoursePoint_name_1 = "Invalid"
)

var (
	_CoursePoint_index_0 = [...]uint8{0, 7, 13, 19, 24, 28, 34, 38, 43, 51, 59, 73, 86, 100, 113, 125, 131, 139, 148, 158, 168, 177, 188, 198, 203, 215, 225}
	_CoursePoint_index_1 = [...]uint8{0, 7}
)

func (i CoursePoint) String() string {
	switch {
	case 0 <= i && i <= 25:
		return _CoursePoint_name_0[_CoursePoint_index_0[i]:_CoursePoint_index_0[i+1]]
	case i == 255:
		return _CoursePoint_name_1
	default:
		return fmt.Sprintf("CoursePoint(%d)", i)
	}
}

const (
	_DateMode_name_0 = "DayMonthMonthDay"
	_DateMode_name_1 = "Invalid"
)

var (
	_DateMode_index_0 = [...]uint8{0, 8, 16}
	_DateMode_index_1 = [...]uint8{0, 7}
)

func (i DateMode) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _DateMode_name_0[_DateMode_index_0[i]:_DateMode_index_0[i+1]]
	case i == 255:
		return _DateMode_name_1
	default:
		return fmt.Sprintf("DateMode(%d)", i)
	}
}

const (
	_DayOfWeek_name_0 = "SundayMondayTuesdayWednesdayThursdayFridaySaturday"
	_DayOfWeek_name_1 = "Invalid"
)

var (
	_DayOfWeek_index_0 = [...]uint8{0, 6, 12, 19, 28, 36, 42, 50}
	_DayOfWeek_index_1 = [...]uint8{0, 7}
)

func (i DayOfWeek) String() string {
	switch {
	case 0 <= i && i <= 6:
		return _DayOfWeek_name_0[_DayOfWeek_index_0[i]:_DayOfWeek_index_0[i+1]]
	case i == 255:
		return _DayOfWeek_name_1
	default:
		return fmt.Sprintf("DayOfWeek(%d)", i)
	}
}

const (
	_DeviceIndex_name_0 = "Creator"
	_DeviceIndex_name_1 = "Invalid"
)

var (
	_DeviceIndex_index_0 = [...]uint8{0, 7}
	_DeviceIndex_index_1 = [...]uint8{0, 7}
)

func (i DeviceIndex) String() string {
	switch {
	case i == 0:
		return _DeviceIndex_name_0
	case i == 255:
		return _DeviceIndex_name_1
	default:
		return fmt.Sprintf("DeviceIndex(%d)", i)
	}
}

const (
	_DigitalWatchfaceLayout_name_0 = "TraditionalModernBold"
	_DigitalWatchfaceLayout_name_1 = "Invalid"
)

var (
	_DigitalWatchfaceLayout_index_0 = [...]uint8{0, 11, 17, 21}
	_DigitalWatchfaceLayout_index_1 = [...]uint8{0, 7}
)

func (i DigitalWatchfaceLayout) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _DigitalWatchfaceLayout_name_0[_DigitalWatchfaceLayout_index_0[i]:_DigitalWatchfaceLayout_index_0[i+1]]
	case i == 255:
		return _DigitalWatchfaceLayout_name_1
	default:
		return fmt.Sprintf("DigitalWatchfaceLayout(%d)", i)
	}
}

const (
	_DisplayHeart_name_0 = "BpmMaxReserve"
	_DisplayHeart_name_1 = "Invalid"
)

var (
	_DisplayHeart_index_0 = [...]uint8{0, 3, 6, 13}
	_DisplayHeart_index_1 = [...]uint8{0, 7}
)

func (i DisplayHeart) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _DisplayHeart_name_0[_DisplayHeart_index_0[i]:_DisplayHeart_index_0[i+1]]
	case i == 255:
		return _DisplayHeart_name_1
	default:
		return fmt.Sprintf("DisplayHeart(%d)", i)
	}
}

const (
	_DisplayMeasure_name_0 = "MetricStatuteNautical"
	_DisplayMeasure_name_1 = "Invalid"
)

var (
	_DisplayMeasure_index_0 = [...]uint8{0, 6, 13, 21}
	_DisplayMeasure_index_1 = [...]uint8{0, 7}
)

func (i DisplayMeasure) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _DisplayMeasure_name_0[_DisplayMeasure_index_0[i]:_DisplayMeasure_index_0[i+1]]
	case i == 255:
		return _DisplayMeasure_name_1
	default:
		return fmt.Sprintf("DisplayMeasure(%d)", i)
	}
}

const (
	_DisplayOrientation_name_0 = "AutoPortraitLandscapePortraitFlippedLandscapeFlipped"
	_DisplayOrientation_name_1 = "Invalid"
)

var (
	_DisplayOrientation_index_0 = [...]uint8{0, 4, 12, 21, 36, 52}
	_DisplayOrientation_index_1 = [...]uint8{0, 7}
)

func (i DisplayOrientation) String() string {
	switch {
	case 0 <= i && i <= 4:
		return _DisplayOrientation_name_0[_DisplayOrientation_index_0[i]:_DisplayOrientation_index_0[i+1]]
	case i == 255:
		return _DisplayOrientation_name_1
	default:
		return fmt.Sprintf("DisplayOrientation(%d)", i)
	}
}

const (
	_DisplayPosition_name_0 = "DegreeDegreeMinuteDegreeMinuteSecondAustrianGridBritishGridDutchGridHungarianGridFinnishGridGermanGridIcelandicGridIndonesianEquatorialIndonesianIrianIndonesianSouthernIndiaZone0IndiaZoneIAIndiaZoneIBIndiaZoneIIAIndiaZoneIIBIndiaZoneIIIAIndiaZoneIIIBIndiaZoneIVAIndiaZoneIVBIrishTransverseIrishGridLoranMaidenheadGridMgrsGridNewZealandGridNewZealandTransverseQatarGridModifiedSwedishGridSwedishGridSouthAfricanGridSwissGridTaiwanGridUnitedStatesGridUtmUpsGridWestMalayanBorneoRsoEstonianGridLatvianGridSwedishRef99Grid"
	_DisplayPosition_name_1 = "Invalid"
)

var (
	_DisplayPosition_index_0 = [...]uint16{0, 6, 18, 36, 48, 59, 68, 81, 92, 102, 115, 135, 150, 168, 178, 189, 200, 212, 224, 237, 250, 262, 274, 289, 298, 303, 317, 325, 339, 359, 368, 387, 398, 414, 423, 433, 449, 459, 470, 479, 491, 502, 518}
	_DisplayPosition_index_1 = [...]uint8{0, 7}
)

func (i DisplayPosition) String() string {
	switch {
	case 0 <= i && i <= 41:
		return _DisplayPosition_name_0[_DisplayPosition_index_0[i]:_DisplayPosition_index_0[i+1]]
	case i == 255:
		return _DisplayPosition_name_1
	default:
		return fmt.Sprintf("DisplayPosition(%d)", i)
	}
}

const (
	_DisplayPower_name_0 = "WattsPercentFtp"
	_DisplayPower_name_1 = "Invalid"
)

var (
	_DisplayPower_index_0 = [...]uint8{0, 5, 15}
	_DisplayPower_index_1 = [...]uint8{0, 7}
)

func (i DisplayPower) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _DisplayPower_name_0[_DisplayPower_index_0[i]:_DisplayPower_index_0[i+1]]
	case i == 255:
		return _DisplayPower_name_1
	default:
		return fmt.Sprintf("DisplayPower(%d)", i)
	}
}

const (
	_Event_name_0 = "Timer"
	_Event_name_1 = "WorkoutWorkoutStepPowerDownPowerUpOffCourseSessionLapCoursePointBatteryVirtualPartnerPaceHrHighAlertHrLowAlertSpeedHighAlertSpeedLowAlertCadHighAlertCadLowAlertPowerHighAlertPowerLowAlertRecoveryHrBatteryLowTimeDurationAlertDistanceDurationAlertCalorieDurationAlertActivityFitnessEquipmentLength"
	_Event_name_2 = "UserMarkerSportPoint"
	_Event_name_3 = "Calibration"
	_Event_name_4 = "FrontGearChangeRearGearChangeRiderPositionChangeElevHighAlertElevLowAlertCommTimeout"
	_Event_name_5 = "Invalid"
)

var (
	_Event_index_0 = [...]uint8{0, 5}
	_Event_index_1 = [...]uint16{0, 7, 18, 27, 34, 43, 50, 53, 64, 71, 89, 100, 110, 124, 137, 149, 160, 174, 187, 197, 207, 224, 245, 265, 273, 289, 295}
	_Event_index_2 = [...]uint8{0, 10, 20}
	_Event_index_3 = [...]uint8{0, 11}
	_Event_index_4 = [...]uint8{0, 15, 29, 48, 61, 73, 84}
	_Event_index_5 = [...]uint8{0, 7}
)

func (i Event) String() string {
	switch {
	case i == 0:
		return _Event_name_0
	case 3 <= i && i <= 28:
		i -= 3
		return _Event_name_1[_Event_index_1[i]:_Event_index_1[i+1]]
	case 32 <= i && i <= 33:
		i -= 32
		return _Event_name_2[_Event_index_2[i]:_Event_index_2[i+1]]
	case i == 36:
		return _Event_name_3
	case 42 <= i && i <= 47:
		i -= 42
		return _Event_name_4[_Event_index_4[i]:_Event_index_4[i+1]]
	case i == 255:
		return _Event_name_5
	default:
		return fmt.Sprintf("Event(%d)", i)
	}
}

const (
	_EventType_name_0 = "StartStopConsecutiveDepreciatedMarkerStopAllBeginDepreciatedEndDepreciatedEndAllDepreciatedStopDisableStopDisableAll"
	_EventType_name_1 = "Invalid"
)

var (
	_EventType_index_0 = [...]uint8{0, 5, 9, 31, 37, 44, 60, 74, 91, 102, 116}
	_EventType_index_1 = [...]uint8{0, 7}
)

func (i EventType) String() string {
	switch {
	case 0 <= i && i <= 9:
		return _EventType_name_0[_EventType_index_0[i]:_EventType_index_0[i+1]]
	case i == 255:
		return _EventType_name_1
	default:
		return fmt.Sprintf("EventType(%d)", i)
	}
}

const (
	_ExdDataUnits_name_0 = "NoUnitsLapsMilesPerHourKilometersPerHourFeetPerHourMetersPerHourDegreesCelsiusDegreesFarenheitZoneGearRpmBpmDegreesMillimetersMetersKilometersFeetYardsKilofeetMilesTimeEnumTurnTypePercentWattsWattsPerKilogramEnumBatteryStatusEnumBikeLightBeamAngleModeEnumBikeLightBatteryStatusEnumBikeLightNetworkConfigTypeLightsSecondsMinutesHoursCaloriesKilojoulesMillisecondsSecondPerMileSecondPerKilometerCentimeterEnumCoursePointBradiansEnumSportInchesHgMmHgMbarsHectoPascalsFeetPerMinMetersPerMinMetersPerSecEightCardinal"
	_ExdDataUnits_name_1 = "Invalid"
)

var (
	_ExdDataUnits_index_0 = [...]uint16{0, 7, 11, 23, 40, 51, 64, 78, 94, 98, 102, 105, 108, 115, 126, 132, 142, 146, 151, 159, 164, 168, 180, 187, 192, 208, 225, 251, 277, 307, 313, 320, 327, 332, 340, 350, 362, 375, 393, 403, 418, 426, 435, 443, 447, 452, 464, 474, 486, 498, 511}
	_ExdDataUnits_index_1 = [...]uint8{0, 7}
)

func (i ExdDataUnits) String() string {
	switch {
	case 0 <= i && i <= 49:
		return _ExdDataUnits_name_0[_ExdDataUnits_index_0[i]:_ExdDataUnits_index_0[i+1]]
	case i == 255:
		return _ExdDataUnits_name_1
	default:
		return fmt.Sprintf("ExdDataUnits(%d)", i)
	}
}

const (
	_ExdDescriptors_name_0 = "BikeLightBatteryStatusBeamAngleStatusBateryLevelLightNetworkModeNumberLightsConnectedCadenceDistanceEstimatedTimeOfArrivalHeadingTimeBatteryLevelTrainerResistanceTrainerTargetPowerTimeSeatedTimeStandingElevationGradeAscentDescentVerticalSpeedDi2BatteryLevelFrontGearRearGearGearRatioHeartRateHeartRateZoneTimeInHeartRateZoneHeartRateReserveCaloriesGpsAccuracyGpsSignalStrengthTemperatureTimeOfDayBalancePedalSmoothnessPowerFunctionalThresholdPowerIntensityFactorWorkPowerRatioNormalizedPowerTrainingStressScoreTimeOnZoneSpeedLapsRepsWorkoutStepCourseDistanceNavigationDistanceCourseEstimatedTimeOfArrivalNavigationEstimatedTimeOfArrivalCourseTimeNavigationTimeCourseHeadingNavigationHeadingPowerZoneTorqueEffectivenessTimerTimePowerWeightRatioLeftPlatformCenterOffsetRightPlatformCenterOffsetLeftPowerPhaseStartAngleRightPowerPhaseStartAngleLeftPowerPhaseFinishAngleRightPowerPhaseFinishAngleGearsPaceTrainingEffectVerticalOscillationVerticalRatioGroundContactTimeLeftGroundContactTimeBalanceRightGroundContactTimeBalanceStrideLengthRunningCadencePerformanceConditionCourseTypeTimeInPowerZoneNavigationTurnCourseLocationNavigationLocationCompassGearComboMuscleOxygenIconCompassHeadingGpsHeadingGpsElevationAnaerobicTrainingEffectCourseOffCourseGlideRatioVerticalDistanceVmgAmbientPressurePressureVam"
	_ExdDescriptors_name_1 = "Invalid"
)

var (
	_ExdDescriptors_index_0 = [...]uint16{0, 22, 37, 48, 64, 85, 92, 100, 122, 129, 133, 145, 162, 180, 190, 202, 211, 216, 222, 229, 242, 257, 266, 274, 283, 292, 305, 324, 340, 348, 359, 376, 387, 396, 403, 418, 423, 447, 462, 466, 476, 491, 510, 520, 525, 529, 533, 544, 558, 576, 604, 636, 646, 660, 673, 690, 699, 718, 727, 743, 767, 792, 816, 841, 866, 892, 897, 901, 915, 934, 947, 964, 992, 1021, 1033, 1047, 1067, 1077, 1092, 1106, 1120, 1138, 1145, 1154, 1166, 1170, 1184, 1194, 1206, 1229, 1235, 1244, 1254, 1270, 1273, 1288, 1296, 1299}
	_ExdDescriptors_index_1 = [...]uint8{0, 7}
)

func (i ExdDescriptors) String() string {
	switch {
	case 0 <= i && i <= 96:
		return _ExdDescriptors_name_0[_ExdDescriptors_index_0[i]:_ExdDescriptors_index_0[i+1]]
	case i == 255:
		return _ExdDescriptors_name_1
	default:
		return fmt.Sprintf("ExdDescriptors(%d)", i)
	}
}

const (
	_ExdDisplayType_name_0 = "NumericalSimpleGraphBarCircleGraphVirtualPartnerBalanceStringListStringSimpleDynamicIconGauge"
	_ExdDisplayType_name_1 = "Invalid"
)

var (
	_ExdDisplayType_index_0 = [...]uint8{0, 9, 15, 20, 23, 34, 48, 55, 65, 71, 88, 93}
	_ExdDisplayType_index_1 = [...]uint8{0, 7}
)

func (i ExdDisplayType) String() string {
	switch {
	case 0 <= i && i <= 10:
		return _ExdDisplayType_name_0[_ExdDisplayType_index_0[i]:_ExdDisplayType_index_0[i+1]]
	case i == 255:
		return _ExdDisplayType_name_1
	default:
		return fmt.Sprintf("ExdDisplayType(%d)", i)
	}
}

const (
	_ExdLayout_name_0 = "FullScreenHalfVerticalHalfHorizontalHalfVerticalRightSplitHalfHorizontalBottomSplitFullQuarterSplitHalfVerticalLeftSplitHalfHorizontalTopSplit"
	_ExdLayout_name_1 = "Invalid"
)

var (
	_ExdLayout_index_0 = [...]uint8{0, 10, 22, 36, 58, 83, 99, 120, 142}
	_ExdLayout_index_1 = [...]uint8{0, 7}
)

func (i ExdLayout) String() string {
	switch {
	case 0 <= i && i <= 7:
		return _ExdLayout_name_0[_ExdLayout_index_0[i]:_ExdLayout_index_0[i+1]]
	case i == 255:
		return _ExdLayout_name_1
	default:
		return fmt.Sprintf("ExdLayout(%d)", i)
	}
}

const (
	_ExdQualifiers_name_0 = "NoQualifierInstantaneousAverageLapMaximumMaximumAverageMaximumLapLastLapAverageLapToDestinationToGoToNextNextCoursePointTotalThreeSecondAverageTenSecondAverageThirtySecondAveragePercentMaximumPercentMaximumAverageLapPercentMaximumElapsedSunriseSunsetComparedToVirtualPartnerMaximum24hMinimum24hMinimumFirstSecondThirdShifterLastSportMovingStopped"
	_ExdQualifiers_name_1 = "Zone9Zone8Zone7Zone6Zone5Zone4Zone3Zone2Zone1"
	_ExdQualifiers_name_2 = "Invalid"
)

var (
	_ExdQualifiers_index_0 = [...]uint16{0, 11, 24, 31, 34, 41, 55, 65, 72, 82, 95, 99, 105, 120, 125, 143, 159, 178, 192, 213, 230, 237, 244, 250, 274, 284, 294, 301, 306, 312, 317, 324, 333, 339, 346}
	_ExdQualifiers_index_1 = [...]uint8{0, 5, 10, 15, 20, 25, 30, 35, 40, 45}
	_ExdQualifiers_index_2 = [...]uint8{0, 7}
)

func (i ExdQualifiers) String() string {
	switch {
	case 0 <= i && i <= 33:
		return _ExdQualifiers_name_0[_ExdQualifiers_index_0[i]:_ExdQualifiers_index_0[i+1]]
	case 242 <= i && i <= 250:
		i -= 242
		return _ExdQualifiers_name_1[_ExdQualifiers_index_1[i]:_ExdQualifiers_index_1[i+1]]
	case i == 255:
		return _ExdQualifiers_name_2
	default:
		return fmt.Sprintf("ExdQualifiers(%d)", i)
	}
}

const (
	_FileFlags_name_0 = "Invalid"
	_FileFlags_name_1 = "Read"
	_FileFlags_name_2 = "Write"
	_FileFlags_name_3 = "Erase"
)

var (
	_FileFlags_index_0 = [...]uint8{0, 7}
	_FileFlags_index_1 = [...]uint8{0, 4}
	_FileFlags_index_2 = [...]uint8{0, 5}
	_FileFlags_index_3 = [...]uint8{0, 5}
)

func (i FileFlags) String() string {
	switch {
	case i == 0:
		return _FileFlags_name_0
	case i == 2:
		return _FileFlags_name_1
	case i == 4:
		return _FileFlags_name_2
	case i == 8:
		return _FileFlags_name_3
	default:
		return fmt.Sprintf("FileFlags(%d)", i)
	}
}

const (
	_FileType_name_0 = "DeviceSettingsSportActivityWorkoutCourseSchedules"
	_FileType_name_1 = "WeightTotalsGoals"
	_FileType_name_2 = "BloodPressureMonitoringA"
	_FileType_name_3 = "ActivitySummary"
	_FileType_name_4 = "MonitoringDaily"
	_FileType_name_5 = "MonitoringB"
	_FileType_name_6 = "SegmentSegmentList"
	_FileType_name_7 = "ExdConfiguration"
	_FileType_name_8 = "MfgRangeMin"
	_FileType_name_9 = "MfgRangeMaxInvalid"
)

var (
	_FileType_index_0 = [...]uint8{0, 6, 14, 19, 27, 34, 40, 49}
	_FileType_index_1 = [...]uint8{0, 6, 12, 17}
	_FileType_index_2 = [...]uint8{0, 13, 24}
	_FileType_index_3 = [...]uint8{0, 15}
	_FileType_index_4 = [...]uint8{0, 15}
	_FileType_index_5 = [...]uint8{0, 11}
	_FileType_index_6 = [...]uint8{0, 7, 18}
	_FileType_index_7 = [...]uint8{0, 16}
	_FileType_index_8 = [...]uint8{0, 11}
	_FileType_index_9 = [...]uint8{0, 11, 18}
)

func (i FileType) String() string {
	switch {
	case 1 <= i && i <= 7:
		i -= 1
		return _FileType_name_0[_FileType_index_0[i]:_FileType_index_0[i+1]]
	case 9 <= i && i <= 11:
		i -= 9
		return _FileType_name_1[_FileType_index_1[i]:_FileType_index_1[i+1]]
	case 14 <= i && i <= 15:
		i -= 14
		return _FileType_name_2[_FileType_index_2[i]:_FileType_index_2[i+1]]
	case i == 20:
		return _FileType_name_3
	case i == 28:
		return _FileType_name_4
	case i == 32:
		return _FileType_name_5
	case 34 <= i && i <= 35:
		i -= 34
		return _FileType_name_6[_FileType_index_6[i]:_FileType_index_6[i+1]]
	case i == 40:
		return _FileType_name_7
	case i == 247:
		return _FileType_name_8
	case 254 <= i && i <= 255:
		i -= 254
		return _FileType_name_9[_FileType_index_9[i]:_FileType_index_9[i+1]]
	default:
		return fmt.Sprintf("FileType(%d)", i)
	}
}

const (
	_FitBaseType_name_0 = "EnumSint8Uint8"
	_FitBaseType_name_1 = "String"
	_FitBaseType_name_2 = "Uint8z"
	_FitBaseType_name_3 = "Byte"
	_FitBaseType_name_4 = "Sint16Uint16Sint32Uint32"
	_FitBaseType_name_5 = "Float32Float64"
	_FitBaseType_name_6 = "Uint16zUint32z"
	_FitBaseType_name_7 = "Sint64Uint64Uint64z"
	_FitBaseType_name_8 = "Invalid"
)

var (
	_FitBaseType_index_0 = [...]uint8{0, 4, 9, 14}
	_FitBaseType_index_1 = [...]uint8{0, 6}
	_FitBaseType_index_2 = [...]uint8{0, 6}
	_FitBaseType_index_3 = [...]uint8{0, 4}
	_FitBaseType_index_4 = [...]uint8{0, 6, 12, 18, 24}
	_FitBaseType_index_5 = [...]uint8{0, 7, 14}
	_FitBaseType_index_6 = [...]uint8{0, 7, 14}
	_FitBaseType_index_7 = [...]uint8{0, 6, 12, 19}
	_FitBaseType_index_8 = [...]uint8{0, 7}
)

func (i FitBaseType) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _FitBaseType_name_0[_FitBaseType_index_0[i]:_FitBaseType_index_0[i+1]]
	case i == 7:
		return _FitBaseType_name_1
	case i == 10:
		return _FitBaseType_name_2
	case i == 13:
		return _FitBaseType_name_3
	case 131 <= i && i <= 134:
		i -= 131
		return _FitBaseType_name_4[_FitBaseType_index_4[i]:_FitBaseType_index_4[i+1]]
	case 136 <= i && i <= 137:
		i -= 136
		return _FitBaseType_name_5[_FitBaseType_index_5[i]:_FitBaseType_index_5[i+1]]
	case 139 <= i && i <= 140:
		i -= 139
		return _FitBaseType_name_6[_FitBaseType_index_6[i]:_FitBaseType_index_6[i+1]]
	case 142 <= i && i <= 144:
		i -= 142
		return _FitBaseType_name_7[_FitBaseType_index_7[i]:_FitBaseType_index_7[i+1]]
	case i == 255:
		return _FitBaseType_name_8
	default:
		return fmt.Sprintf("FitBaseType(%d)", i)
	}
}

const (
	_FitBaseUnit_name_0 = "OtherKilogramPound"
	_FitBaseUnit_name_1 = "Invalid"
)

var (
	_FitBaseUnit_index_0 = [...]uint8{0, 5, 13, 18}
	_FitBaseUnit_index_1 = [...]uint8{0, 7}
)

func (i FitBaseUnit) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _FitBaseUnit_name_0[_FitBaseUnit_index_0[i]:_FitBaseUnit_index_0[i+1]]
	case i == 65535:
		return _FitBaseUnit_name_1
	default:
		return fmt.Sprintf("FitBaseUnit(%d)", i)
	}
}

const (
	_FitnessEquipmentState_name_0 = "ReadyInUsePausedUnknown"
	_FitnessEquipmentState_name_1 = "Invalid"
)

var (
	_FitnessEquipmentState_index_0 = [...]uint8{0, 5, 10, 16, 23}
	_FitnessEquipmentState_index_1 = [...]uint8{0, 7}
)

func (i FitnessEquipmentState) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _FitnessEquipmentState_name_0[_FitnessEquipmentState_index_0[i]:_FitnessEquipmentState_index_0[i+1]]
	case i == 255:
		return _FitnessEquipmentState_name_1
	default:
		return fmt.Sprintf("FitnessEquipmentState(%d)", i)
	}
}

const _GarminProduct_name = "Hrm1Axh01Axb01Axb02Hrm2ssDsiAlf02Hrm3ssHrmRunSingleByteProductIdBsmBcmAxs01HrmTriSingleByteProductIdFr225SingleByteProductIdFr301ChinaFr301JapanFr301KoreaFr301TaiwanFr405Fr50Fr405JapanFr60DsiAlf01Fr310xtEdge500Fr110Edge800Edge500TaiwanEdge500JapanChirpFr110JapanEdge200Fr910xtEdge800TaiwanEdge800JapanAlf04Fr610Fr210JapanVectorSsVectorCpEdge800ChinaEdge500ChinaFr610JapanEdge500KoreaFr70Fr310xt4tAmxFr10Edge800KoreaSwimFr910xtChinaFenixEdge200TaiwanEdge510Edge810TempeFr910xtJapanFr620Fr220Fr910xtKoreaFr10JapanEdge810JapanVirbEliteEdgeTouringEdge510JapanHrmTriHrmRunFr920xtEdge510AsiaEdge810ChinaEdge810TaiwanEdge1000VivoFitVirbRemoteVivoKiFr15VivoActiveEdge510KoreaFr620JapanFr620ChinaFr220JapanFr220ChinaApproachS6VivoSmartFenix2EpixFenix3Edge1000TaiwanEdge1000JapanFr15JapanEdge520Edge1000ChinaFr620RussiaFr220RussiaVectorSEdge1000KoreaFr920xtTaiwanFr920xtChinaFr920xtJapanVirbxVivoSmartApacEtrexTouchEdge25Fr25VivoFit2Fr225Fr630Fr230VivoActiveApacVector2Vector2sVirbxeFr620TaiwanFr220TaiwanTruswingFenix3ChinaFenix3TwnVariaHeadlightVariaTaillightOldEdgeExplore1000Fr225AsiaVariaRadarTaillightVariaRadarDisplayEdge20D2BravoApproachS20VariaRemoteHrm4RunVivoActiveHrVivoSmartGpsHrVivoSmartHrVivoMoveVariaVisionVivoFit3Fenix3HrVirbUltra30IndexSmartScaleFr235Fenix3ChronosOregon7xxRino7xxNautixEdge820EdgeExplore820Fenix5sD2BravoTitaniumRunningDynamicsPodFenix5xVivoFitJrFr935Fenix5Sdm4EdgeRemoteTrainingCenterConnectiqSimulatorAndroidAntplusPluginConnectInvalid"

var _GarminProduct_map = map[GarminProduct]string{
	1:     _GarminProduct_name[0:4],
	2:     _GarminProduct_name[4:9],
	3:     _GarminProduct_name[9:14],
	4:     _GarminProduct_name[14:19],
	5:     _GarminProduct_name[19:25],
	6:     _GarminProduct_name[25:33],
	7:     _GarminProduct_name[33:39],
	8:     _GarminProduct_name[39:64],
	9:     _GarminProduct_name[64:67],
	10:    _GarminProduct_name[67:70],
	11:    _GarminProduct_name[70:75],
	12:    _GarminProduct_name[75:100],
	14:    _GarminProduct_name[100:124],
	473:   _GarminProduct_name[124:134],
	474:   _GarminProduct_name[134:144],
	475:   _GarminProduct_name[144:154],
	494:   _GarminProduct_name[154:165],
	717:   _GarminProduct_name[165:170],
	782:   _GarminProduct_name[170:174],
	987:   _GarminProduct_name[174:184],
	988:   _GarminProduct_name[184:188],
	1011:  _GarminProduct_name[188:196],
	1018:  _GarminProduct_name[196:203],
	1036:  _GarminProduct_name[203:210],
	1124:  _GarminProduct_name[210:215],
	1169:  _GarminProduct_name[215:222],
	1199:  _GarminProduct_name[222:235],
	1213:  _GarminProduct_name[235:247],
	1253:  _GarminProduct_name[247:252],
	1274:  _GarminProduct_name[252:262],
	1325:  _GarminProduct_name[262:269],
	1328:  _GarminProduct_name[269:276],
	1333:  _GarminProduct_name[276:289],
	1334:  _GarminProduct_name[289:301],
	1341:  _GarminProduct_name[301:306],
	1345:  _GarminProduct_name[306:311],
	1360:  _GarminProduct_name[311:321],
	1380:  _GarminProduct_name[321:329],
	1381:  _GarminProduct_name[329:337],
	1386:  _GarminProduct_name[337:349],
	1387:  _GarminProduct_name[349:361],
	1410:  _GarminProduct_name[361:371],
	1422:  _GarminProduct_name[371:383],
	1436:  _GarminProduct_name[383:387],
	1446:  _GarminProduct_name[387:396],
	1461:  _GarminProduct_name[396:399],
	1482:  _GarminProduct_name[399:403],
	1497:  _GarminProduct_name[403:415],
	1499:  _GarminProduct_name[415:419],
	1537:  _GarminProduct_name[419:431],
	1551:  _GarminProduct_name[431:436],
	1555:  _GarminProduct_name[436:449],
	1561:  _GarminProduct_name[449:456],
	1567:  _GarminProduct_name[456:463],
	1570:  _GarminProduct_name[463:468],
	1600:  _GarminProduct_name[468:480],
	1623:  _GarminProduct_name[480:485],
	1632:  _GarminProduct_name[485:490],
	1664:  _GarminProduct_name[490:502],
	1688:  _GarminProduct_name[502:511],
	1721:  _GarminProduct_name[511:523],
	1735:  _GarminProduct_name[523:532],
	1736:  _GarminProduct_name[532:543],
	1742:  _GarminProduct_name[543:555],
	1743:  _GarminProduct_name[555:561],
	1752:  _GarminProduct_name[561:567],
	1765:  _GarminProduct_name[567:574],
	1821:  _GarminProduct_name[574:585],
	1822:  _GarminProduct_name[585:597],
	1823:  _GarminProduct_name[597:610],
	1836:  _GarminProduct_name[610:618],
	1837:  _GarminProduct_name[618:625],
	1853:  _GarminProduct_name[625:635],
	1885:  _GarminProduct_name[635:641],
	1903:  _GarminProduct_name[641:645],
	1907:  _GarminProduct_name[645:655],
	1918:  _GarminProduct_name[655:667],
	1928:  _GarminProduct_name[667:677],
	1929:  _GarminProduct_name[677:687],
	1930:  _GarminProduct_name[687:697],
	1931:  _GarminProduct_name[697:707],
	1936:  _GarminProduct_name[707:717],
	1956:  _GarminProduct_name[717:726],
	1967:  _GarminProduct_name[726:732],
	1988:  _GarminProduct_name[732:736],
	2050:  _GarminProduct_name[736:742],
	2052:  _GarminProduct_name[742:756],
	2053:  _GarminProduct_name[756:769],
	2061:  _GarminProduct_name[769:778],
	2067:  _GarminProduct_name[778:785],
	2070:  _GarminProduct_name[785:798],
	2072:  _GarminProduct_name[798:809],
	2073:  _GarminProduct_name[809:820],
	2079:  _GarminProduct_name[820:827],
	2100:  _GarminProduct_name[827:840],
	2130:  _GarminProduct_name[840:853],
	2131:  _GarminProduct_name[853:865],
	2132:  _GarminProduct_name[865:877],
	2134:  _GarminProduct_name[877:882],
	2135:  _GarminProduct_name[882:895],
	2140:  _GarminProduct_name[895:905],
	2147:  _GarminProduct_name[905:911],
	2148:  _GarminProduct_name[911:915],
	2150:  _GarminProduct_name[915:923],
	2153:  _GarminProduct_name[923:928],
	2156:  _GarminProduct_name[928:933],
	2157:  _GarminProduct_name[933:938],
	2160:  _GarminProduct_name[938:952],
	2161:  _GarminProduct_name[952:959],
	2162:  _GarminProduct_name[959:967],
	2172:  _GarminProduct_name[967:973],
	2173:  _GarminProduct_name[973:984],
	2174:  _GarminProduct_name[984:995],
	2175:  _GarminProduct_name[995:1003],
	2188:  _GarminProduct_name[1003:1014],
	2189:  _GarminProduct_name[1014:1023],
	2192:  _GarminProduct_name[1023:1037],
	2193:  _GarminProduct_name[1037:1054],
	2204:  _GarminProduct_name[1054:1069],
	2219:  _GarminProduct_name[1069:1078],
	2225:  _GarminProduct_name[1078:1097],
	2226:  _GarminProduct_name[1097:1114],
	2238:  _GarminProduct_name[1114:1120],
	2262:  _GarminProduct_name[1120:1127],
	2266:  _GarminProduct_name[1127:1138],
	2276:  _GarminProduct_name[1138:1149],
	2327:  _GarminProduct_name[1149:1156],
	2337:  _GarminProduct_name[1156:1168],
	2347:  _GarminProduct_name[1168:1182],
	2348:  _GarminProduct_name[1182:1193],
	2368:  _GarminProduct_name[1193:1201],
	2398:  _GarminProduct_name[1201:1212],
	2406:  _GarminProduct_name[1212:1220],
	2413:  _GarminProduct_name[1220:1228],
	2417:  _GarminProduct_name[1228:1239],
	2429:  _GarminProduct_name[1239:1254],
	2431:  _GarminProduct_name[1254:1259],
	2432:  _GarminProduct_name[1259:1272],
	2441:  _GarminProduct_name[1272:1281],
	2444:  _GarminProduct_name[1281:1288],
	2496:  _GarminProduct_name[1288:1294],
	2530:  _GarminProduct_name[1294:1301],
	2531:  _GarminProduct_name[1301:1315],
	2544:  _GarminProduct_name[1315:1322],
	2547:  _GarminProduct_name[1322:1337],
	2593:  _GarminProduct_name[1337:1355],
	2604:  _GarminProduct_name[1355:1362],
	2606:  _GarminProduct_name[1362:1371],
	2691:  _GarminProduct_name[1371:1376],
	2697:  _GarminProduct_name[1376:1382],
	10007: _GarminProduct_name[1382:1386],
	10014: _GarminProduct_name[1386:1396],
	20119: _GarminProduct_name[1396:1410],
	65531: _GarminProduct_name[1410:1428],
	65532: _GarminProduct_name[1428:1448],
	65534: _GarminProduct_name[1448:1455],
	65535: _GarminProduct_name[1455:1462],
}

func (i GarminProduct) String() string {
	if str, ok := _GarminProduct_map[i]; ok {
		return str
	}
	return fmt.Sprintf("GarminProduct(%d)", i)
}

const (
	_Gender_name_0 = "FemaleMale"
	_Gender_name_1 = "Invalid"
)

var (
	_Gender_index_0 = [...]uint8{0, 6, 10}
	_Gender_index_1 = [...]uint8{0, 7}
)

func (i Gender) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _Gender_name_0[_Gender_index_0[i]:_Gender_index_0[i+1]]
	case i == 255:
		return _Gender_name_1
	default:
		return fmt.Sprintf("Gender(%d)", i)
	}
}

const (
	_Goal_name_0 = "TimeDistanceCaloriesFrequencyStepsAscentActiveMinutes"
	_Goal_name_1 = "Invalid"
)

var (
	_Goal_index_0 = [...]uint8{0, 4, 12, 20, 29, 34, 40, 53}
	_Goal_index_1 = [...]uint8{0, 7}
)

func (i Goal) String() string {
	switch {
	case 0 <= i && i <= 6:
		return _Goal_name_0[_Goal_index_0[i]:_Goal_index_0[i+1]]
	case i == 255:
		return _Goal_name_1
	default:
		return fmt.Sprintf("Goal(%d)", i)
	}
}

const (
	_GoalRecurrence_name_0 = "OffDailyWeeklyMonthlyYearlyCustom"
	_GoalRecurrence_name_1 = "Invalid"
)

var (
	_GoalRecurrence_index_0 = [...]uint8{0, 3, 8, 14, 21, 27, 33}
	_GoalRecurrence_index_1 = [...]uint8{0, 7}
)

func (i GoalRecurrence) String() string {
	switch {
	case 0 <= i && i <= 5:
		return _GoalRecurrence_name_0[_GoalRecurrence_index_0[i]:_GoalRecurrence_index_0[i+1]]
	case i == 255:
		return _GoalRecurrence_name_1
	default:
		return fmt.Sprintf("GoalRecurrence(%d)", i)
	}
}

const (
	_GoalSource_name_0 = "AutoCommunityUser"
	_GoalSource_name_1 = "Invalid"
)

var (
	_GoalSource_index_0 = [...]uint8{0, 4, 13, 17}
	_GoalSource_index_1 = [...]uint8{0, 7}
)

func (i GoalSource) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _GoalSource_name_0[_GoalSource_index_0[i]:_GoalSource_index_0[i+1]]
	case i == 255:
		return _GoalSource_name_1
	default:
		return fmt.Sprintf("GoalSource(%d)", i)
	}
}

const (
	_HrType_name_0 = "NormalIrregular"
	_HrType_name_1 = "Invalid"
)

var (
	_HrType_index_0 = [...]uint8{0, 6, 15}
	_HrType_index_1 = [...]uint8{0, 7}
)

func (i HrType) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _HrType_name_0[_HrType_index_0[i]:_HrType_index_0[i+1]]
	case i == 255:
		return _HrType_name_1
	default:
		return fmt.Sprintf("HrType(%d)", i)
	}
}

const (
	_HrZoneCalc_name_0 = "CustomPercentMaxHrPercentHrr"
	_HrZoneCalc_name_1 = "Invalid"
)

var (
	_HrZoneCalc_index_0 = [...]uint8{0, 6, 18, 28}
	_HrZoneCalc_index_1 = [...]uint8{0, 7}
)

func (i HrZoneCalc) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _HrZoneCalc_name_0[_HrZoneCalc_index_0[i]:_HrZoneCalc_index_0[i+1]]
	case i == 255:
		return _HrZoneCalc_name_1
	default:
		return fmt.Sprintf("HrZoneCalc(%d)", i)
	}
}

const (
	_Intensity_name_0 = "ActiveRestWarmupCooldown"
	_Intensity_name_1 = "Invalid"
)

var (
	_Intensity_index_0 = [...]uint8{0, 6, 10, 16, 24}
	_Intensity_index_1 = [...]uint8{0, 7}
)

func (i Intensity) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _Intensity_name_0[_Intensity_index_0[i]:_Intensity_index_0[i+1]]
	case i == 255:
		return _Intensity_name_1
	default:
		return fmt.Sprintf("Intensity(%d)", i)
	}
}

const (
	_Language_name_0 = "EnglishFrenchItalianGermanSpanishCroatianCzechDanishDutchFinnishGreekHungarianNorwegianPolishPortugueseSlovakianSlovenianSwedishRussianTurkishLatvianUkrainianArabicFarsiBulgarianRomanianChineseJapaneseKoreanTaiwaneseThaiHebrewBrazilianPortugueseIndonesianMalaysianVietnameseBurmeseMongolian"
	_Language_name_1 = "CustomInvalid"
)

var (
	_Language_index_0 = [...]uint16{0, 7, 13, 20, 26, 33, 41, 46, 52, 57, 64, 69, 78, 87, 93, 103, 112, 121, 128, 135, 142, 149, 158, 164, 169, 178, 186, 193, 201, 207, 216, 220, 226, 245, 255, 264, 274, 281, 290}
	_Language_index_1 = [...]uint8{0, 6, 13}
)

func (i Language) String() string {
	switch {
	case 0 <= i && i <= 37:
		return _Language_name_0[_Language_index_0[i]:_Language_index_0[i+1]]
	case 254 <= i && i <= 255:
		i -= 254
		return _Language_name_1[_Language_index_1[i]:_Language_index_1[i+1]]
	default:
		return fmt.Sprintf("Language(%d)", i)
	}
}

const (
	_LanguageBits0_name_0 = "InvalidEnglishFrench"
	_LanguageBits0_name_1 = "Italian"
	_LanguageBits0_name_2 = "German"
	_LanguageBits0_name_3 = "Spanish"
	_LanguageBits0_name_4 = "Croatian"
	_LanguageBits0_name_5 = "Czech"
	_LanguageBits0_name_6 = "Danish"
)

var (
	_LanguageBits0_index_0 = [...]uint8{0, 7, 14, 20}
	_LanguageBits0_index_1 = [...]uint8{0, 7}
	_LanguageBits0_index_2 = [...]uint8{0, 6}
	_LanguageBits0_index_3 = [...]uint8{0, 7}
	_LanguageBits0_index_4 = [...]uint8{0, 8}
	_LanguageBits0_index_5 = [...]uint8{0, 5}
	_LanguageBits0_index_6 = [...]uint8{0, 6}
)

func (i LanguageBits0) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _LanguageBits0_name_0[_LanguageBits0_index_0[i]:_LanguageBits0_index_0[i+1]]
	case i == 4:
		return _LanguageBits0_name_1
	case i == 8:
		return _LanguageBits0_name_2
	case i == 16:
		return _LanguageBits0_name_3
	case i == 32:
		return _LanguageBits0_name_4
	case i == 64:
		return _LanguageBits0_name_5
	case i == 128:
		return _LanguageBits0_name_6
	default:
		return fmt.Sprintf("LanguageBits0(%d)", i)
	}
}

const (
	_LanguageBits1_name_0 = "InvalidDutchFinnish"
	_LanguageBits1_name_1 = "Greek"
	_LanguageBits1_name_2 = "Hungarian"
	_LanguageBits1_name_3 = "Norwegian"
	_LanguageBits1_name_4 = "Polish"
	_LanguageBits1_name_5 = "Portuguese"
	_LanguageBits1_name_6 = "Slovakian"
)

var (
	_LanguageBits1_index_0 = [...]uint8{0, 7, 12, 19}
	_LanguageBits1_index_1 = [...]uint8{0, 5}
	_LanguageBits1_index_2 = [...]uint8{0, 9}
	_LanguageBits1_index_3 = [...]uint8{0, 9}
	_LanguageBits1_index_4 = [...]uint8{0, 6}
	_LanguageBits1_index_5 = [...]uint8{0, 10}
	_LanguageBits1_index_6 = [...]uint8{0, 9}
)

func (i LanguageBits1) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _LanguageBits1_name_0[_LanguageBits1_index_0[i]:_LanguageBits1_index_0[i+1]]
	case i == 4:
		return _LanguageBits1_name_1
	case i == 8:
		return _LanguageBits1_name_2
	case i == 16:
		return _LanguageBits1_name_3
	case i == 32:
		return _LanguageBits1_name_4
	case i == 64:
		return _LanguageBits1_name_5
	case i == 128:
		return _LanguageBits1_name_6
	default:
		return fmt.Sprintf("LanguageBits1(%d)", i)
	}
}

const (
	_LanguageBits2_name_0 = "InvalidSlovenianSwedish"
	_LanguageBits2_name_1 = "Russian"
	_LanguageBits2_name_2 = "Turkish"
	_LanguageBits2_name_3 = "Latvian"
	_LanguageBits2_name_4 = "Ukrainian"
	_LanguageBits2_name_5 = "Arabic"
	_LanguageBits2_name_6 = "Farsi"
)

var (
	_LanguageBits2_index_0 = [...]uint8{0, 7, 16, 23}
	_LanguageBits2_index_1 = [...]uint8{0, 7}
	_LanguageBits2_index_2 = [...]uint8{0, 7}
	_LanguageBits2_index_3 = [...]uint8{0, 7}
	_LanguageBits2_index_4 = [...]uint8{0, 9}
	_LanguageBits2_index_5 = [...]uint8{0, 6}
	_LanguageBits2_index_6 = [...]uint8{0, 5}
)

func (i LanguageBits2) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _LanguageBits2_name_0[_LanguageBits2_index_0[i]:_LanguageBits2_index_0[i+1]]
	case i == 4:
		return _LanguageBits2_name_1
	case i == 8:
		return _LanguageBits2_name_2
	case i == 16:
		return _LanguageBits2_name_3
	case i == 32:
		return _LanguageBits2_name_4
	case i == 64:
		return _LanguageBits2_name_5
	case i == 128:
		return _LanguageBits2_name_6
	default:
		return fmt.Sprintf("LanguageBits2(%d)", i)
	}
}

const (
	_LanguageBits3_name_0 = "InvalidBulgarianRomanian"
	_LanguageBits3_name_1 = "Chinese"
	_LanguageBits3_name_2 = "Japanese"
	_LanguageBits3_name_3 = "Korean"
	_LanguageBits3_name_4 = "Taiwanese"
	_LanguageBits3_name_5 = "Thai"
	_LanguageBits3_name_6 = "Hebrew"
)

var (
	_LanguageBits3_index_0 = [...]uint8{0, 7, 16, 24}
	_LanguageBits3_index_1 = [...]uint8{0, 7}
	_LanguageBits3_index_2 = [...]uint8{0, 8}
	_LanguageBits3_index_3 = [...]uint8{0, 6}
	_LanguageBits3_index_4 = [...]uint8{0, 9}
	_LanguageBits3_index_5 = [...]uint8{0, 4}
	_LanguageBits3_index_6 = [...]uint8{0, 6}
)

func (i LanguageBits3) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _LanguageBits3_name_0[_LanguageBits3_index_0[i]:_LanguageBits3_index_0[i+1]]
	case i == 4:
		return _LanguageBits3_name_1
	case i == 8:
		return _LanguageBits3_name_2
	case i == 16:
		return _LanguageBits3_name_3
	case i == 32:
		return _LanguageBits3_name_4
	case i == 64:
		return _LanguageBits3_name_5
	case i == 128:
		return _LanguageBits3_name_6
	default:
		return fmt.Sprintf("LanguageBits3(%d)", i)
	}
}

const (
	_LanguageBits4_name_0 = "InvalidBrazilianPortugueseIndonesian"
	_LanguageBits4_name_1 = "Malaysian"
	_LanguageBits4_name_2 = "Vietnamese"
	_LanguageBits4_name_3 = "Burmese"
	_LanguageBits4_name_4 = "Mongolian"
)

var (
	_LanguageBits4_index_0 = [...]uint8{0, 7, 26, 36}
	_LanguageBits4_index_1 = [...]uint8{0, 9}
	_LanguageBits4_index_2 = [...]uint8{0, 10}
	_LanguageBits4_index_3 = [...]uint8{0, 7}
	_LanguageBits4_index_4 = [...]uint8{0, 9}
)

func (i LanguageBits4) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _LanguageBits4_name_0[_LanguageBits4_index_0[i]:_LanguageBits4_index_0[i+1]]
	case i == 4:
		return _LanguageBits4_name_1
	case i == 8:
		return _LanguageBits4_name_2
	case i == 16:
		return _LanguageBits4_name_3
	case i == 32:
		return _LanguageBits4_name_4
	default:
		return fmt.Sprintf("LanguageBits4(%d)", i)
	}
}

const (
	_LapTrigger_name_0 = "ManualTimeDistancePositionStartPositionLapPositionWaypointPositionMarkedSessionEndFitnessEquipment"
	_LapTrigger_name_1 = "Invalid"
)

var (
	_LapTrigger_index_0 = [...]uint8{0, 6, 10, 18, 31, 42, 58, 72, 82, 98}
	_LapTrigger_index_1 = [...]uint8{0, 7}
)

func (i LapTrigger) String() string {
	switch {
	case 0 <= i && i <= 8:
		return _LapTrigger_name_0[_LapTrigger_index_0[i]:_LapTrigger_index_0[i+1]]
	case i == 255:
		return _LapTrigger_name_1
	default:
		return fmt.Sprintf("LapTrigger(%d)", i)
	}
}

const (
	_LeftRightBalance_name_0 = "MaskRight"
	_LeftRightBalance_name_1 = "Invalid"
)

var (
	_LeftRightBalance_index_0 = [...]uint8{0, 4, 9}
	_LeftRightBalance_index_1 = [...]uint8{0, 7}
)

func (i LeftRightBalance) String() string {
	switch {
	case 127 <= i && i <= 128:
		i -= 127
		return _LeftRightBalance_name_0[_LeftRightBalance_index_0[i]:_LeftRightBalance_index_0[i+1]]
	case i == 255:
		return _LeftRightBalance_name_1
	default:
		return fmt.Sprintf("LeftRightBalance(%d)", i)
	}
}

const (
	_LeftRightBalance100_name_0 = "Mask"
	_LeftRightBalance100_name_1 = "Right"
	_LeftRightBalance100_name_2 = "Invalid"
)

var (
	_LeftRightBalance100_index_0 = [...]uint8{0, 4}
	_LeftRightBalance100_index_1 = [...]uint8{0, 5}
	_LeftRightBalance100_index_2 = [...]uint8{0, 7}
)

func (i LeftRightBalance100) String() string {
	switch {
	case i == 16383:
		return _LeftRightBalance100_name_0
	case i == 32768:
		return _LeftRightBalance100_name_1
	case i == 65535:
		return _LeftRightBalance100_name_2
	default:
		return fmt.Sprintf("LeftRightBalance100(%d)", i)
	}
}

const (
	_LengthType_name_0 = "IdleActive"
	_LengthType_name_1 = "Invalid"
)

var (
	_LengthType_index_0 = [...]uint8{0, 4, 10}
	_LengthType_index_1 = [...]uint8{0, 7}
)

func (i LengthType) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _LengthType_name_0[_LengthType_index_0[i]:_LengthType_index_0[i+1]]
	case i == 255:
		return _LengthType_name_1
	default:
		return fmt.Sprintf("LengthType(%d)", i)
	}
}

const _LocaltimeIntoDay_name = "Invalid"

var _LocaltimeIntoDay_index = [...]uint8{0, 7}

func (i LocaltimeIntoDay) String() string {
	i -= 4294967295
	if i >= LocaltimeIntoDay(len(_LocaltimeIntoDay_index)-1) {
		return fmt.Sprintf("LocaltimeIntoDay(%d)", i+4294967295)
	}
	return _LocaltimeIntoDay_name[_LocaltimeIntoDay_index[i]:_LocaltimeIntoDay_index[i+1]]
}

const (
	_Manufacturer_name_0 = "GarminGarminFr405AntfsZephyrDaytonIdtSrmQuarqIbikeSarisSparkHkTanitaEchowellDynastreamOemNautilusDynastreamTimexMetrigearXelicBeurerCardiosportAAndDHmmSuuntoThitaElektronikGpulseCleanMobilePedalBrainPeakswareSaxonarLemondFitnessDexcomWahooFitnessOctaneFitnessArchinoeticsTheHurtBoxCitizenSystemsMagellanOsynceHoluxConcept2"
	_Manufacturer_name_1 = "OneGiantLeapAceSensorBrimBrothersXplovaPerceptionDigitalBf1systemsPioneerSpantecMetalogics4iiiisSeikoEpsonSeikoEpsonOemIforPowellMaxwellGuiderStarTracBreakawayAlatechTechnologyLtdMioTechnologyEuropeRotorGeonauteIdBikeSpecializedWtekPhysicalEnterprisesNorthPoleEngineeringBkoolCateyeStagesCyclingSigmasportTomtomPeripedalWattbike"
	_Manufacturer_name_2 = "MoxyCiclosportPowerbahnAcornProjectsApsLifebeamBontragerWellgoScoscheMaguraWoodwayEliteNielsenKellermanDkCityTacxDirectionTechnologyMagtonic1partcarbonInsideRideTechnologiesSoundOfMotionStrydIcgMiPulseBsxAthleticsLookCampagnoloSrlBodyBikeSmartPraxisworksLimitsTechnologyTopactionTechnologyCosinussFitcareMageneGiantManufacturingCoTigrasportSalutronTechnogymBrytonSensorsLatitudeLimitedSoaringTechnologyIgpsport"
	_Manufacturer_name_3 = "Development"
	_Manufacturer_name_4 = "HealthandlifeLezyneScribeLabsZwiftWatteamReconFaveroElectronicsDynoveloStravaPrecorBrytonSramNavmanCobiSpiviMioMagellanEvesportsSensitivusGaugePodoonLifeTimeFitnessFalcoEMotorsMinouraCycliqLuxotticaTrainerRoadTheSufferfestFullspeedahead"
	_Manufacturer_name_5 = "Actigraphcorp"
	_Manufacturer_name_6 = "Invalid"
)

var (
	_Manufacturer_index_0 = [...]uint16{0, 6, 22, 28, 34, 37, 40, 45, 50, 55, 62, 68, 76, 89, 97, 107, 112, 121, 126, 132, 143, 148, 151, 157, 172, 178, 189, 199, 208, 215, 228, 234, 246, 259, 271, 281, 295, 303, 309, 314, 322}
	_Manufacturer_index_1 = [...]uint16{0, 12, 21, 33, 39, 56, 66, 73, 80, 90, 96, 106, 119, 129, 142, 150, 159, 179, 198, 203, 211, 217, 228, 232, 251, 271, 276, 282, 295, 305, 311, 320, 328}
	_Manufacturer_index_2 = [...]uint16{0, 4, 14, 23, 39, 47, 56, 62, 69, 75, 82, 87, 103, 109, 113, 132, 140, 151, 173, 186, 191, 194, 201, 213, 217, 230, 243, 254, 270, 289, 297, 304, 310, 330, 340, 348, 357, 370, 385, 402, 410}
	_Manufacturer_index_3 = [...]uint8{0, 11}
	_Manufacturer_index_4 = [...]uint8{0, 13, 19, 29, 34, 41, 46, 63, 71, 77, 83, 89, 93, 99, 103, 108, 119, 128, 143, 149, 164, 176, 183, 189, 198, 209, 222, 236}
	_Manufacturer_index_5 = [...]uint8{0, 13}
	_Manufacturer_index_6 = [...]uint8{0, 7}
)

func (i Manufacturer) String() string {
	switch {
	case 1 <= i && i <= 40:
		i -= 1
		return _Manufacturer_name_0[_Manufacturer_index_0[i]:_Manufacturer_index_0[i+1]]
	case 42 <= i && i <= 73:
		i -= 42
		return _Manufacturer_name_1[_Manufacturer_index_1[i]:_Manufacturer_index_1[i+1]]
	case 76 <= i && i <= 115:
		i -= 76
		return _Manufacturer_name_2[_Manufacturer_index_2[i]:_Manufacturer_index_2[i+1]]
	case i == 255:
		return _Manufacturer_name_3
	case 257 <= i && i <= 283:
		i -= 257
		return _Manufacturer_name_4[_Manufacturer_index_4[i]:_Manufacturer_index_4[i+1]]
	case i == 5759:
		return _Manufacturer_name_5
	case i == 65535:
		return _Manufacturer_name_6
	default:
		return fmt.Sprintf("Manufacturer(%d)", i)
	}
}

const (
	_MesgCount_name_0 = "NumPerFileMaxPerFileMaxPerFileType"
	_MesgCount_name_1 = "Invalid"
)

var (
	_MesgCount_index_0 = [...]uint8{0, 10, 20, 34}
	_MesgCount_index_1 = [...]uint8{0, 7}
)

func (i MesgCount) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _MesgCount_name_0[_MesgCount_index_0[i]:_MesgCount_index_0[i+1]]
	case i == 255:
		return _MesgCount_name_1
	default:
		return fmt.Sprintf("MesgCount(%d)", i)
	}
}

const _MesgNum_name = "FileIdCapabilitiesDeviceSettingsUserProfileHrmProfileSdmProfileBikeProfileZonesTargetHrZonePowerZoneMetZoneSportGoalSessionLapRecordEventDeviceInfoWorkoutWorkoutStepScheduleWeightScaleCourseCoursePointTotalsActivitySoftwareFileCapabilitiesMesgCapabilitiesFieldCapabilitiesFileCreatorBloodPressureSpeedZoneMonitoringTrainingFileHrvAntRxAntTxAntChannelIdLengthMonitoringInfoPadSlaveDeviceConnectivityWeatherConditionsWeatherAlertCadenceZoneHrSegmentLapMemoGlobSegmentIdSegmentLeaderboardEntrySegmentPointSegmentFileWorkoutSessionWatchfaceSettingsGpsMetadataCameraEventTimestampCorrelationGyroscopeDataAccelerometerDataThreeDSensorCalibrationVideoFrameObdiiDataNmeaSentenceAviationAttitudeVideoVideoTitleVideoDescriptionVideoClipOhrSettingsExdScreenConfigurationExdDataFieldConfigurationExdDataConceptConfigurationFieldDescriptionDeveloperDataIdMagnetometerDataMfgRangeMinMfgRangeMaxInvalid"

var _MesgNum_map = map[MesgNum]string{
	0:     _MesgNum_name[0:6],
	1:     _MesgNum_name[6:18],
	2:     _MesgNum_name[18:32],
	3:     _MesgNum_name[32:43],
	4:     _MesgNum_name[43:53],
	5:     _MesgNum_name[53:63],
	6:     _MesgNum_name[63:74],
	7:     _MesgNum_name[74:85],
	8:     _MesgNum_name[85:91],
	9:     _MesgNum_name[91:100],
	10:    _MesgNum_name[100:107],
	12:    _MesgNum_name[107:112],
	15:    _MesgNum_name[112:116],
	18:    _MesgNum_name[116:123],
	19:    _MesgNum_name[123:126],
	20:    _MesgNum_name[126:132],
	21:    _MesgNum_name[132:137],
	23:    _MesgNum_name[137:147],
	26:    _MesgNum_name[147:154],
	27:    _MesgNum_name[154:165],
	28:    _MesgNum_name[165:173],
	30:    _MesgNum_name[173:184],
	31:    _MesgNum_name[184:190],
	32:    _MesgNum_name[190:201],
	33:    _MesgNum_name[201:207],
	34:    _MesgNum_name[207:215],
	35:    _MesgNum_name[215:223],
	37:    _MesgNum_name[223:239],
	38:    _MesgNum_name[239:255],
	39:    _MesgNum_name[255:272],
	49:    _MesgNum_name[272:283],
	51:    _MesgNum_name[283:296],
	53:    _MesgNum_name[296:305],
	55:    _MesgNum_name[305:315],
	72:    _MesgNum_name[315:327],
	78:    _MesgNum_name[327:330],
	80:    _MesgNum_name[330:335],
	81:    _MesgNum_name[335:340],
	82:    _MesgNum_name[340:352],
	101:   _MesgNum_name[352:358],
	103:   _MesgNum_name[358:372],
	105:   _MesgNum_name[372:375],
	106:   _MesgNum_name[375:386],
	127:   _MesgNum_name[386:398],
	128:   _MesgNum_name[398:415],
	129:   _MesgNum_name[415:427],
	131:   _MesgNum_name[427:438],
	132:   _MesgNum_name[438:440],
	142:   _MesgNum_name[440:450],
	145:   _MesgNum_name[450:458],
	148:   _MesgNum_name[458:467],
	149:   _MesgNum_name[467:490],
	150:   _MesgNum_name[490:502],
	151:   _MesgNum_name[502:513],
	158:   _MesgNum_name[513:527],
	159:   _MesgNum_name[527:544],
	160:   _MesgNum_name[544:555],
	161:   _MesgNum_name[555:566],
	162:   _MesgNum_name[566:586],
	164:   _MesgNum_name[586:599],
	165:   _MesgNum_name[599:616],
	167:   _MesgNum_name[616:639],
	169:   _MesgNum_name[639:649],
	174:   _MesgNum_name[649:658],
	177:   _MesgNum_name[658:670],
	178:   _MesgNum_name[670:686],
	184:   _MesgNum_name[686:691],
	185:   _MesgNum_name[691:701],
	186:   _MesgNum_name[701:717],
	187:   _MesgNum_name[717:726],
	188:   _MesgNum_name[726:737],
	200:   _MesgNum_name[737:759],
	201:   _MesgNum_name[759:784],
	202:   _MesgNum_name[784:811],
	206:   _MesgNum_name[811:827],
	207:   _MesgNum_name[827:842],
	208:   _MesgNum_name[842:858],
	65280: _MesgNum_name[858:869],
	65534: _MesgNum_name[869:880],
	65535: _MesgNum_name[880:887],
}

func (i MesgNum) String() string {
	if str, ok := _MesgNum_map[i]; ok {
		return str
	}
	return fmt.Sprintf("MesgNum(%d)", i)
}

const (
	_MessageIndex_name_0 = "Mask"
	_MessageIndex_name_1 = "Reserved"
	_MessageIndex_name_2 = "Selected"
	_MessageIndex_name_3 = "Invalid"
)

var (
	_MessageIndex_index_0 = [...]uint8{0, 4}
	_MessageIndex_index_1 = [...]uint8{0, 8}
	_MessageIndex_index_2 = [...]uint8{0, 8}
	_MessageIndex_index_3 = [...]uint8{0, 7}
)

func (i MessageIndex) String() string {
	switch {
	case i == 4095:
		return _MessageIndex_name_0
	case i == 28672:
		return _MessageIndex_name_1
	case i == 32768:
		return _MessageIndex_name_2
	case i == 65535:
		return _MessageIndex_name_3
	default:
		return fmt.Sprintf("MessageIndex(%d)", i)
	}
}

const (
	_PowerPhaseType_name_0 = "PowerPhaseStartAnglePowerPhaseEndAnglePowerPhaseArcLengthPowerPhaseCenter"
	_PowerPhaseType_name_1 = "Invalid"
)

var (
	_PowerPhaseType_index_0 = [...]uint8{0, 20, 38, 57, 73}
	_PowerPhaseType_index_1 = [...]uint8{0, 7}
)

func (i PowerPhaseType) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _PowerPhaseType_name_0[_PowerPhaseType_index_0[i]:_PowerPhaseType_index_0[i+1]]
	case i == 255:
		return _PowerPhaseType_name_1
	default:
		return fmt.Sprintf("PowerPhaseType(%d)", i)
	}
}

const (
	_PwrZoneCalc_name_0 = "CustomPercentFtp"
	_PwrZoneCalc_name_1 = "Invalid"
)

var (
	_PwrZoneCalc_index_0 = [...]uint8{0, 6, 16}
	_PwrZoneCalc_index_1 = [...]uint8{0, 7}
)

func (i PwrZoneCalc) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _PwrZoneCalc_name_0[_PwrZoneCalc_index_0[i]:_PwrZoneCalc_index_0[i+1]]
	case i == 255:
		return _PwrZoneCalc_name_1
	default:
		return fmt.Sprintf("PwrZoneCalc(%d)", i)
	}
}

const (
	_RiderPositionType_name_0 = "SeatedStandingTransitionToSeatedTransitionToStanding"
	_RiderPositionType_name_1 = "Invalid"
)

var (
	_RiderPositionType_index_0 = [...]uint8{0, 6, 14, 32, 52}
	_RiderPositionType_index_1 = [...]uint8{0, 7}
)

func (i RiderPositionType) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _RiderPositionType_name_0[_RiderPositionType_index_0[i]:_RiderPositionType_index_0[i+1]]
	case i == 255:
		return _RiderPositionType_name_1
	default:
		return fmt.Sprintf("RiderPositionType(%d)", i)
	}
}

const (
	_Schedule_name_0 = "WorkoutCourse"
	_Schedule_name_1 = "Invalid"
)

var (
	_Schedule_index_0 = [...]uint8{0, 7, 13}
	_Schedule_index_1 = [...]uint8{0, 7}
)

func (i Schedule) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _Schedule_name_0[_Schedule_index_0[i]:_Schedule_index_0[i+1]]
	case i == 255:
		return _Schedule_name_1
	default:
		return fmt.Sprintf("Schedule(%d)", i)
	}
}

const (
	_SegmentDeleteStatus_name_0 = "DoNotDeleteDeleteOneDeleteAll"
	_SegmentDeleteStatus_name_1 = "Invalid"
)

var (
	_SegmentDeleteStatus_index_0 = [...]uint8{0, 11, 20, 29}
	_SegmentDeleteStatus_index_1 = [...]uint8{0, 7}
)

func (i SegmentDeleteStatus) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _SegmentDeleteStatus_name_0[_SegmentDeleteStatus_index_0[i]:_SegmentDeleteStatus_index_0[i+1]]
	case i == 255:
		return _SegmentDeleteStatus_name_1
	default:
		return fmt.Sprintf("SegmentDeleteStatus(%d)", i)
	}
}

const (
	_SegmentLapStatus_name_0 = "EndFail"
	_SegmentLapStatus_name_1 = "Invalid"
)

var (
	_SegmentLapStatus_index_0 = [...]uint8{0, 3, 7}
	_SegmentLapStatus_index_1 = [...]uint8{0, 7}
)

func (i SegmentLapStatus) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _SegmentLapStatus_name_0[_SegmentLapStatus_index_0[i]:_SegmentLapStatus_index_0[i+1]]
	case i == 255:
		return _SegmentLapStatus_name_1
	default:
		return fmt.Sprintf("SegmentLapStatus(%d)", i)
	}
}

const (
	_SegmentLeaderboardType_name_0 = "OverallPersonalBestConnectionsGroupChallengerKomQomPrGoalRivalClubLeader"
	_SegmentLeaderboardType_name_1 = "Invalid"
)

var (
	_SegmentLeaderboardType_index_0 = [...]uint8{0, 7, 19, 30, 35, 45, 48, 51, 53, 57, 62, 72}
	_SegmentLeaderboardType_index_1 = [...]uint8{0, 7}
)

func (i SegmentLeaderboardType) String() string {
	switch {
	case 0 <= i && i <= 10:
		return _SegmentLeaderboardType_name_0[_SegmentLeaderboardType_index_0[i]:_SegmentLeaderboardType_index_0[i+1]]
	case i == 255:
		return _SegmentLeaderboardType_name_1
	default:
		return fmt.Sprintf("SegmentLeaderboardType(%d)", i)
	}
}

const (
	_SegmentSelectionType_name_0 = "StarredSuggested"
	_SegmentSelectionType_name_1 = "Invalid"
)

var (
	_SegmentSelectionType_index_0 = [...]uint8{0, 7, 16}
	_SegmentSelectionType_index_1 = [...]uint8{0, 7}
)

func (i SegmentSelectionType) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _SegmentSelectionType_name_0[_SegmentSelectionType_index_0[i]:_SegmentSelectionType_index_0[i+1]]
	case i == 255:
		return _SegmentSelectionType_name_1
	default:
		return fmt.Sprintf("SegmentSelectionType(%d)", i)
	}
}

const (
	_SensorType_name_0 = "AccelerometerGyroscopeCompass"
	_SensorType_name_1 = "Invalid"
)

var (
	_SensorType_index_0 = [...]uint8{0, 13, 22, 29}
	_SensorType_index_1 = [...]uint8{0, 7}
)

func (i SensorType) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _SensorType_name_0[_SensorType_index_0[i]:_SensorType_index_0[i+1]]
	case i == 255:
		return _SensorType_name_1
	default:
		return fmt.Sprintf("SensorType(%d)", i)
	}
}

const (
	_SessionTrigger_name_0 = "ActivityEndManualAutoMultiSportFitnessEquipment"
	_SessionTrigger_name_1 = "Invalid"
)

var (
	_SessionTrigger_index_0 = [...]uint8{0, 11, 17, 31, 47}
	_SessionTrigger_index_1 = [...]uint8{0, 7}
)

func (i SessionTrigger) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _SessionTrigger_name_0[_SessionTrigger_index_0[i]:_SessionTrigger_index_0[i+1]]
	case i == 255:
		return _SessionTrigger_name_1
	default:
		return fmt.Sprintf("SessionTrigger(%d)", i)
	}
}

const (
	_Side_name_0 = "RightLeft"
	_Side_name_1 = "Invalid"
)

var (
	_Side_index_0 = [...]uint8{0, 5, 9}
	_Side_index_1 = [...]uint8{0, 7}
)

func (i Side) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _Side_name_0[_Side_index_0[i]:_Side_index_0[i+1]]
	case i == 255:
		return _Side_name_1
	default:
		return fmt.Sprintf("Side(%d)", i)
	}
}

const (
	_SourceType_name_0 = "AntAntplusBluetoothBluetoothLowEnergyWifiLocal"
	_SourceType_name_1 = "Invalid"
)

var (
	_SourceType_index_0 = [...]uint8{0, 3, 10, 19, 37, 41, 46}
	_SourceType_index_1 = [...]uint8{0, 7}
)

func (i SourceType) String() string {
	switch {
	case 0 <= i && i <= 5:
		return _SourceType_name_0[_SourceType_index_0[i]:_SourceType_index_0[i+1]]
	case i == 255:
		return _SourceType_name_1
	default:
		return fmt.Sprintf("SourceType(%d)", i)
	}
}

const (
	_Sport_name_0 = "GenericRunningCyclingTransitionFitnessEquipmentSwimmingBasketballSoccerTennisAmericanFootballTrainingWalkingCrossCountrySkiingAlpineSkiingSnowboardingRowingMountaineeringHikingMultisportPaddlingFlyingEBikingMotorcyclingBoatingDrivingGolfHangGlidingHorsebackRidingHuntingFishingInlineSkatingRockClimbingSailingIceSkatingSkyDivingSnowshoeingSnowmobilingStandUpPaddleboardingSurfingWakeboardingWaterSkiingKayakingRaftingWindsurfingKitesurfingTacticalJumpmasterBoxingFloorClimbing"
	_Sport_name_1 = "AllInvalid"
)

var (
	_Sport_index_0 = [...]uint16{0, 7, 14, 21, 31, 47, 55, 65, 71, 77, 93, 101, 108, 126, 138, 150, 156, 170, 176, 186, 194, 200, 207, 219, 226, 233, 237, 248, 263, 270, 277, 290, 302, 309, 319, 328, 339, 351, 372, 379, 391, 402, 410, 417, 428, 439, 447, 457, 463, 476}
	_Sport_index_1 = [...]uint8{0, 3, 10}
)

func (i Sport) String() string {
	switch {
	case 0 <= i && i <= 48:
		return _Sport_name_0[_Sport_index_0[i]:_Sport_index_0[i+1]]
	case 254 <= i && i <= 255:
		i -= 254
		return _Sport_name_1[_Sport_index_1[i]:_Sport_index_1[i+1]]
	default:
		return fmt.Sprintf("Sport(%d)", i)
	}
}

const (
	_SportBits0_name_0 = "InvalidGenericRunning"
	_SportBits0_name_1 = "Cycling"
	_SportBits0_name_2 = "Transition"
	_SportBits0_name_3 = "FitnessEquipment"
	_SportBits0_name_4 = "Swimming"
	_SportBits0_name_5 = "Basketball"
	_SportBits0_name_6 = "Soccer"
)

var (
	_SportBits0_index_0 = [...]uint8{0, 7, 14, 21}
	_SportBits0_index_1 = [...]uint8{0, 7}
	_SportBits0_index_2 = [...]uint8{0, 10}
	_SportBits0_index_3 = [...]uint8{0, 16}
	_SportBits0_index_4 = [...]uint8{0, 8}
	_SportBits0_index_5 = [...]uint8{0, 10}
	_SportBits0_index_6 = [...]uint8{0, 6}
)

func (i SportBits0) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _SportBits0_name_0[_SportBits0_index_0[i]:_SportBits0_index_0[i+1]]
	case i == 4:
		return _SportBits0_name_1
	case i == 8:
		return _SportBits0_name_2
	case i == 16:
		return _SportBits0_name_3
	case i == 32:
		return _SportBits0_name_4
	case i == 64:
		return _SportBits0_name_5
	case i == 128:
		return _SportBits0_name_6
	default:
		return fmt.Sprintf("SportBits0(%d)", i)
	}
}

const (
	_SportBits1_name_0 = "InvalidTennisAmericanFootball"
	_SportBits1_name_1 = "Training"
	_SportBits1_name_2 = "Walking"
	_SportBits1_name_3 = "CrossCountrySkiing"
	_SportBits1_name_4 = "AlpineSkiing"
	_SportBits1_name_5 = "Snowboarding"
	_SportBits1_name_6 = "Rowing"
)

var (
	_SportBits1_index_0 = [...]uint8{0, 7, 13, 29}
	_SportBits1_index_1 = [...]uint8{0, 8}
	_SportBits1_index_2 = [...]uint8{0, 7}
	_SportBits1_index_3 = [...]uint8{0, 18}
	_SportBits1_index_4 = [...]uint8{0, 12}
	_SportBits1_index_5 = [...]uint8{0, 12}
	_SportBits1_index_6 = [...]uint8{0, 6}
)

func (i SportBits1) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _SportBits1_name_0[_SportBits1_index_0[i]:_SportBits1_index_0[i+1]]
	case i == 4:
		return _SportBits1_name_1
	case i == 8:
		return _SportBits1_name_2
	case i == 16:
		return _SportBits1_name_3
	case i == 32:
		return _SportBits1_name_4
	case i == 64:
		return _SportBits1_name_5
	case i == 128:
		return _SportBits1_name_6
	default:
		return fmt.Sprintf("SportBits1(%d)", i)
	}
}

const (
	_SportBits2_name_0 = "InvalidMountaineeringHiking"
	_SportBits2_name_1 = "Multisport"
	_SportBits2_name_2 = "Paddling"
	_SportBits2_name_3 = "Flying"
	_SportBits2_name_4 = "EBiking"
	_SportBits2_name_5 = "Motorcycling"
	_SportBits2_name_6 = "Boating"
)

var (
	_SportBits2_index_0 = [...]uint8{0, 7, 21, 27}
	_SportBits2_index_1 = [...]uint8{0, 10}
	_SportBits2_index_2 = [...]uint8{0, 8}
	_SportBits2_index_3 = [...]uint8{0, 6}
	_SportBits2_index_4 = [...]uint8{0, 7}
	_SportBits2_index_5 = [...]uint8{0, 12}
	_SportBits2_index_6 = [...]uint8{0, 7}
)

func (i SportBits2) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _SportBits2_name_0[_SportBits2_index_0[i]:_SportBits2_index_0[i+1]]
	case i == 4:
		return _SportBits2_name_1
	case i == 8:
		return _SportBits2_name_2
	case i == 16:
		return _SportBits2_name_3
	case i == 32:
		return _SportBits2_name_4
	case i == 64:
		return _SportBits2_name_5
	case i == 128:
		return _SportBits2_name_6
	default:
		return fmt.Sprintf("SportBits2(%d)", i)
	}
}

const (
	_SportBits3_name_0 = "InvalidDrivingGolf"
	_SportBits3_name_1 = "HangGliding"
	_SportBits3_name_2 = "HorsebackRiding"
	_SportBits3_name_3 = "Hunting"
	_SportBits3_name_4 = "Fishing"
	_SportBits3_name_5 = "InlineSkating"
	_SportBits3_name_6 = "RockClimbing"
)

var (
	_SportBits3_index_0 = [...]uint8{0, 7, 14, 18}
	_SportBits3_index_1 = [...]uint8{0, 11}
	_SportBits3_index_2 = [...]uint8{0, 15}
	_SportBits3_index_3 = [...]uint8{0, 7}
	_SportBits3_index_4 = [...]uint8{0, 7}
	_SportBits3_index_5 = [...]uint8{0, 13}
	_SportBits3_index_6 = [...]uint8{0, 12}
)

func (i SportBits3) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _SportBits3_name_0[_SportBits3_index_0[i]:_SportBits3_index_0[i+1]]
	case i == 4:
		return _SportBits3_name_1
	case i == 8:
		return _SportBits3_name_2
	case i == 16:
		return _SportBits3_name_3
	case i == 32:
		return _SportBits3_name_4
	case i == 64:
		return _SportBits3_name_5
	case i == 128:
		return _SportBits3_name_6
	default:
		return fmt.Sprintf("SportBits3(%d)", i)
	}
}

const (
	_SportBits4_name_0 = "InvalidSailingIceSkating"
	_SportBits4_name_1 = "SkyDiving"
	_SportBits4_name_2 = "Snowshoeing"
	_SportBits4_name_3 = "Snowmobiling"
	_SportBits4_name_4 = "StandUpPaddleboarding"
	_SportBits4_name_5 = "Surfing"
	_SportBits4_name_6 = "Wakeboarding"
)

var (
	_SportBits4_index_0 = [...]uint8{0, 7, 14, 24}
	_SportBits4_index_1 = [...]uint8{0, 9}
	_SportBits4_index_2 = [...]uint8{0, 11}
	_SportBits4_index_3 = [...]uint8{0, 12}
	_SportBits4_index_4 = [...]uint8{0, 21}
	_SportBits4_index_5 = [...]uint8{0, 7}
	_SportBits4_index_6 = [...]uint8{0, 12}
)

func (i SportBits4) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _SportBits4_name_0[_SportBits4_index_0[i]:_SportBits4_index_0[i+1]]
	case i == 4:
		return _SportBits4_name_1
	case i == 8:
		return _SportBits4_name_2
	case i == 16:
		return _SportBits4_name_3
	case i == 32:
		return _SportBits4_name_4
	case i == 64:
		return _SportBits4_name_5
	case i == 128:
		return _SportBits4_name_6
	default:
		return fmt.Sprintf("SportBits4(%d)", i)
	}
}

const (
	_SportBits5_name_0 = "InvalidWaterSkiingKayaking"
	_SportBits5_name_1 = "Rafting"
	_SportBits5_name_2 = "Windsurfing"
	_SportBits5_name_3 = "Kitesurfing"
	_SportBits5_name_4 = "Tactical"
	_SportBits5_name_5 = "Jumpmaster"
	_SportBits5_name_6 = "Boxing"
)

var (
	_SportBits5_index_0 = [...]uint8{0, 7, 18, 26}
	_SportBits5_index_1 = [...]uint8{0, 7}
	_SportBits5_index_2 = [...]uint8{0, 11}
	_SportBits5_index_3 = [...]uint8{0, 11}
	_SportBits5_index_4 = [...]uint8{0, 8}
	_SportBits5_index_5 = [...]uint8{0, 10}
	_SportBits5_index_6 = [...]uint8{0, 6}
)

func (i SportBits5) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _SportBits5_name_0[_SportBits5_index_0[i]:_SportBits5_index_0[i+1]]
	case i == 4:
		return _SportBits5_name_1
	case i == 8:
		return _SportBits5_name_2
	case i == 16:
		return _SportBits5_name_3
	case i == 32:
		return _SportBits5_name_4
	case i == 64:
		return _SportBits5_name_5
	case i == 128:
		return _SportBits5_name_6
	default:
		return fmt.Sprintf("SportBits5(%d)", i)
	}
}

const _SportBits6_name = "InvalidFloorClimbing"

var _SportBits6_index = [...]uint8{0, 7, 20}

func (i SportBits6) String() string {
	if i >= SportBits6(len(_SportBits6_index)-1) {
		return fmt.Sprintf("SportBits6(%d)", i)
	}
	return _SportBits6_name[_SportBits6_index[i]:_SportBits6_index[i+1]]
}

const (
	_SportEvent_name_0 = "UncategorizedGeocachingFitnessRecreationRaceSpecialEventTrainingTransportationTouring"
	_SportEvent_name_1 = "Invalid"
)

var (
	_SportEvent_index_0 = [...]uint8{0, 13, 23, 30, 40, 44, 56, 64, 78, 85}
	_SportEvent_index_1 = [...]uint8{0, 7}
)

func (i SportEvent) String() string {
	switch {
	case 0 <= i && i <= 8:
		return _SportEvent_name_0[_SportEvent_index_0[i]:_SportEvent_index_0[i+1]]
	case i == 255:
		return _SportEvent_name_1
	default:
		return fmt.Sprintf("SportEvent(%d)", i)
	}
}

const (
	_StrokeType_name_0 = "NoEventOtherServeForehandBackhandSmash"
	_StrokeType_name_1 = "Invalid"
)

var (
	_StrokeType_index_0 = [...]uint8{0, 7, 12, 17, 25, 33, 38}
	_StrokeType_index_1 = [...]uint8{0, 7}
)

func (i StrokeType) String() string {
	switch {
	case 0 <= i && i <= 5:
		return _StrokeType_name_0[_StrokeType_index_0[i]:_StrokeType_index_0[i+1]]
	case i == 255:
		return _StrokeType_name_1
	default:
		return fmt.Sprintf("StrokeType(%d)", i)
	}
}

const (
	_SubSport_name_0 = "GenericTreadmillStreetTrailTrackSpinIndoorCyclingRoadMountainDownhillRecumbentCyclocrossHandCyclingTrackCyclingIndoorRowingEllipticalStairClimbingLapSwimmingOpenWaterFlexibilityTrainingStrengthTrainingWarmUpMatchExerciseChallengeIndoorSkiingCardioTrainingIndoorWalkingEBikeFitnessBmxCasualWalkingSpeedWalkingBikeToRunTransitionRunToBikeTransitionSwimToBikeTransitionAtvMotocrossBackcountryResortRcDroneWingsuitWhitewaterSkateSkiingYogaPilatesIndoorRunningGravelCyclingEBikeMountainCommutingMixedSurfaceNavigateTrackMeMap"
	_SubSport_name_1 = "VirtualActivityObstacle"
	_SubSport_name_2 = "AllInvalid"
)

var (
	_SubSport_index_0 = [...]uint16{0, 7, 16, 22, 27, 32, 36, 49, 53, 61, 69, 78, 88, 99, 111, 123, 133, 146, 157, 166, 185, 201, 207, 212, 220, 229, 241, 255, 268, 280, 283, 296, 308, 327, 346, 366, 369, 378, 389, 395, 402, 410, 420, 431, 435, 442, 455, 468, 481, 490, 502, 510, 517, 520}
	_SubSport_index_1 = [...]uint8{0, 15, 23}
	_SubSport_index_2 = [...]uint8{0, 3, 10}
)

func (i SubSport) String() string {
	switch {
	case 0 <= i && i <= 52:
		return _SubSport_name_0[_SubSport_index_0[i]:_SubSport_index_0[i+1]]
	case 58 <= i && i <= 59:
		i -= 58
		return _SubSport_name_1[_SubSport_index_1[i]:_SubSport_index_1[i+1]]
	case 254 <= i && i <= 255:
		i -= 254
		return _SubSport_name_2[_SubSport_index_2[i]:_SubSport_index_2[i+1]]
	default:
		return fmt.Sprintf("SubSport(%d)", i)
	}
}

const (
	_SupportedExdScreenLayouts_name_0 = "InvalidFullScreenHalfVertical"
	_SupportedExdScreenLayouts_name_1 = "HalfHorizontal"
	_SupportedExdScreenLayouts_name_2 = "HalfVerticalRightSplit"
	_SupportedExdScreenLayouts_name_3 = "HalfHorizontalBottomSplit"
	_SupportedExdScreenLayouts_name_4 = "FullQuarterSplit"
	_SupportedExdScreenLayouts_name_5 = "HalfVerticalLeftSplit"
	_SupportedExdScreenLayouts_name_6 = "HalfHorizontalTopSplit"
)

var (
	_SupportedExdScreenLayouts_index_0 = [...]uint8{0, 7, 17, 29}
	_SupportedExdScreenLayouts_index_1 = [...]uint8{0, 14}
	_SupportedExdScreenLayouts_index_2 = [...]uint8{0, 22}
	_SupportedExdScreenLayouts_index_3 = [...]uint8{0, 25}
	_SupportedExdScreenLayouts_index_4 = [...]uint8{0, 16}
	_SupportedExdScreenLayouts_index_5 = [...]uint8{0, 21}
	_SupportedExdScreenLayouts_index_6 = [...]uint8{0, 22}
)

func (i SupportedExdScreenLayouts) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _SupportedExdScreenLayouts_name_0[_SupportedExdScreenLayouts_index_0[i]:_SupportedExdScreenLayouts_index_0[i+1]]
	case i == 4:
		return _SupportedExdScreenLayouts_name_1
	case i == 8:
		return _SupportedExdScreenLayouts_name_2
	case i == 16:
		return _SupportedExdScreenLayouts_name_3
	case i == 32:
		return _SupportedExdScreenLayouts_name_4
	case i == 64:
		return _SupportedExdScreenLayouts_name_5
	case i == 128:
		return _SupportedExdScreenLayouts_name_6
	default:
		return fmt.Sprintf("SupportedExdScreenLayouts(%d)", i)
	}
}

const (
	_SwimStroke_name_0 = "FreestyleBackstrokeBreaststrokeButterflyDrillMixedIm"
	_SwimStroke_name_1 = "Invalid"
)

var (
	_SwimStroke_index_0 = [...]uint8{0, 9, 19, 31, 40, 45, 50, 52}
	_SwimStroke_index_1 = [...]uint8{0, 7}
)

func (i SwimStroke) String() string {
	switch {
	case 0 <= i && i <= 6:
		return _SwimStroke_name_0[_SwimStroke_index_0[i]:_SwimStroke_index_0[i+1]]
	case i == 255:
		return _SwimStroke_name_1
	default:
		return fmt.Sprintf("SwimStroke(%d)", i)
	}
}

const (
	_Switch_name_0 = "OffOnAuto"
	_Switch_name_1 = "Invalid"
)

var (
	_Switch_index_0 = [...]uint8{0, 3, 5, 9}
	_Switch_index_1 = [...]uint8{0, 7}
)

func (i Switch) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _Switch_name_0[_Switch_index_0[i]:_Switch_index_0[i+1]]
	case i == 255:
		return _Switch_name_1
	default:
		return fmt.Sprintf("Switch(%d)", i)
	}
}

const _TimeIntoDay_name = "Invalid"

var _TimeIntoDay_index = [...]uint8{0, 7}

func (i TimeIntoDay) String() string {
	i -= 4294967295
	if i >= TimeIntoDay(len(_TimeIntoDay_index)-1) {
		return fmt.Sprintf("TimeIntoDay(%d)", i+4294967295)
	}
	return _TimeIntoDay_name[_TimeIntoDay_index[i]:_TimeIntoDay_index[i+1]]
}

const (
	_TimeMode_name_0 = "Hour12Hour24MilitaryHour12WithSecondsHour24WithSecondsUtc"
	_TimeMode_name_1 = "Invalid"
)

var (
	_TimeMode_index_0 = [...]uint8{0, 6, 12, 20, 37, 54, 57}
	_TimeMode_index_1 = [...]uint8{0, 7}
)

func (i TimeMode) String() string {
	switch {
	case 0 <= i && i <= 5:
		return _TimeMode_name_0[_TimeMode_index_0[i]:_TimeMode_index_0[i+1]]
	case i == 255:
		return _TimeMode_name_1
	default:
		return fmt.Sprintf("TimeMode(%d)", i)
	}
}

const (
	_TimeZone_name_0 = "AlmatyBangkokBombayBrasiliaCairoCapeVerdeIsDarwinEniwetokFijiHongKongIslamabadKabulMagadanMidAtlanticMoscowMuscatNewfoundlandSamoaSydneyTehranTokyoUsAlaskaUsAtlanticUsCentralUsEasternUsHawaiiUsMountainUsPacificOtherAucklandKathmanduEuropeWesternWetEuropeCentralCetEuropeEasternEetJakartaPerthAdelaideBrisbaneTasmaniaIcelandAmsterdamAthensBarcelonaBerlinBrusselsBudapestCopenhagenDublinHelsinkiLisbonLondonMadridMunichOsloParisPragueReykjavikRomeStockholmViennaWarsawZurichQuebecOntarioManitobaSaskatchewanAlbertaBritishColumbiaBoiseBostonChicagoDallasDenverKansasCityLasVegasLosAngelesMiamiMinneapolisNewYorkNewOrleansPhoenixSantaFeSeattleWashingtonDcUsArizonaChitaEkaterinburgIrkutskKaliningradKrasnoyarskNovosibirskPetropavlovskKamchatskiySamaraVladivostokMexicoCentralMexicoMountainMexicoPacificCapeTownWinkhoekLagosRiyahdVenezuelaAustraliaLhSantiago"
	_TimeZone_name_1 = "ManualAutomaticInvalid"
)

var (
	_TimeZone_index_0 = [...]uint16{0, 6, 13, 19, 27, 32, 43, 49, 57, 61, 69, 78, 83, 90, 101, 107, 113, 125, 130, 136, 142, 147, 155, 165, 174, 183, 191, 201, 210, 215, 223, 232, 248, 264, 280, 287, 292, 300, 308, 316, 323, 332, 338, 347, 353, 361, 369, 379, 385, 393, 399, 405, 411, 417, 421, 426, 432, 441, 445, 454, 460, 466, 472, 478, 485, 493, 505, 512, 527, 532, 538, 545, 551, 557, 567, 575, 585, 590, 601, 608, 618, 625, 632, 639, 651, 660, 665, 677, 684, 695, 706, 717, 741, 747, 758, 771, 785, 798, 806, 814, 819, 825, 834, 845, 853}
	_TimeZone_index_1 = [...]uint8{0, 6, 15, 22}
)

func (i TimeZone) String() string {
	switch {
	case 0 <= i && i <= 103:
		return _TimeZone_name_0[_TimeZone_index_0[i]:_TimeZone_index_0[i+1]]
	case 253 <= i && i <= 255:
		i -= 253
		return _TimeZone_name_1[_TimeZone_index_1[i]:_TimeZone_index_1[i+1]]
	default:
		return fmt.Sprintf("TimeZone(%d)", i)
	}
}

const (
	_TimerTrigger_name_0 = "ManualAutoFitnessEquipment"
	_TimerTrigger_name_1 = "Invalid"
)

var (
	_TimerTrigger_index_0 = [...]uint8{0, 6, 10, 26}
	_TimerTrigger_index_1 = [...]uint8{0, 7}
)

func (i TimerTrigger) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _TimerTrigger_name_0[_TimerTrigger_index_0[i]:_TimerTrigger_index_0[i+1]]
	case i == 255:
		return _TimerTrigger_name_1
	default:
		return fmt.Sprintf("TimerTrigger(%d)", i)
	}
}

const (
	_TurnType_name_0 = "ArrivingIdxArrivingLeftIdxArrivingRightIdxArrivingViaIdxArrivingViaLeftIdxArrivingViaRightIdxBearKeepLeftIdxBearKeepRightIdxContinueIdxExitLeftIdxExitRightIdxFerryIdxRoundabout45IdxRoundabout90IdxRoundabout135IdxRoundabout180IdxRoundabout225IdxRoundabout270IdxRoundabout315IdxRoundabout360IdxRoundaboutNeg45IdxRoundaboutNeg90IdxRoundaboutNeg135IdxRoundaboutNeg180IdxRoundaboutNeg225IdxRoundaboutNeg270IdxRoundaboutNeg315IdxRoundaboutNeg360IdxRoundaboutGenericIdxRoundaboutNegGenericIdxSharpTurnLeftIdxSharpTurnRightIdxTurnLeftIdxTurnRightIdxUturnLeftIdxUturnRightIdxIconInvIdxIconIdxCnt"
	_TurnType_name_1 = "Invalid"
)

var (
	_TurnType_index_0 = [...]uint16{0, 11, 26, 42, 56, 74, 93, 108, 124, 135, 146, 158, 166, 181, 196, 212, 228, 244, 260, 276, 292, 310, 328, 347, 366, 385, 404, 423, 442, 462, 485, 501, 518, 529, 541, 553, 566, 576, 586}
	_TurnType_index_1 = [...]uint8{0, 7}
)

func (i TurnType) String() string {
	switch {
	case 0 <= i && i <= 37:
		return _TurnType_name_0[_TurnType_index_0[i]:_TurnType_index_0[i+1]]
	case i == 255:
		return _TurnType_name_1
	default:
		return fmt.Sprintf("TurnType(%d)", i)
	}
}

const (
	_UserLocalId_name_0 = "LocalMin"
	_UserLocalId_name_1 = "LocalMaxStationaryMin"
	_UserLocalId_name_2 = "StationaryMaxPortableMin"
	_UserLocalId_name_3 = "PortableMaxInvalid"
)

var (
	_UserLocalId_index_0 = [...]uint8{0, 8}
	_UserLocalId_index_1 = [...]uint8{0, 8, 21}
	_UserLocalId_index_2 = [...]uint8{0, 13, 24}
	_UserLocalId_index_3 = [...]uint8{0, 11, 18}
)

func (i UserLocalId) String() string {
	switch {
	case i == 0:
		return _UserLocalId_name_0
	case 15 <= i && i <= 16:
		i -= 15
		return _UserLocalId_name_1[_UserLocalId_index_1[i]:_UserLocalId_index_1[i+1]]
	case 255 <= i && i <= 256:
		i -= 255
		return _UserLocalId_name_2[_UserLocalId_index_2[i]:_UserLocalId_index_2[i+1]]
	case 65534 <= i && i <= 65535:
		i -= 65534
		return _UserLocalId_name_3[_UserLocalId_index_3[i]:_UserLocalId_index_3[i+1]]
	default:
		return fmt.Sprintf("UserLocalId(%d)", i)
	}
}

const (
	_WatchfaceMode_name_0 = "DigitalAnalogConnectIqDisabled"
	_WatchfaceMode_name_1 = "Invalid"
)

var (
	_WatchfaceMode_index_0 = [...]uint8{0, 7, 13, 22, 30}
	_WatchfaceMode_index_1 = [...]uint8{0, 7}
)

func (i WatchfaceMode) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _WatchfaceMode_name_0[_WatchfaceMode_index_0[i]:_WatchfaceMode_index_0[i+1]]
	case i == 255:
		return _WatchfaceMode_name_1
	default:
		return fmt.Sprintf("WatchfaceMode(%d)", i)
	}
}

const (
	_WeatherReport_name_0 = "CurrentForecastDailyForecast"
	_WeatherReport_name_1 = "Invalid"
)

var (
	_WeatherReport_index_0 = [...]uint8{0, 7, 15, 28}
	_WeatherReport_index_1 = [...]uint8{0, 7}
)

func (i WeatherReport) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _WeatherReport_name_0[_WeatherReport_index_0[i]:_WeatherReport_index_0[i+1]]
	case i == 255:
		return _WeatherReport_name_1
	default:
		return fmt.Sprintf("WeatherReport(%d)", i)
	}
}

const (
	_WeatherSevereType_name_0 = "UnspecifiedTornadoTsunamiHurricaneExtremeWindTyphoonInlandHurricaneHurricaneForceWindWaterspoutSevereThunderstormWreckhouseWindsLesSuetesWindAvalancheFlashFloodTropicalStormInlandTropicalStormBlizzardIceStormFreezingRainDebrisFlowFlashFreezeDustStormHighWindWinterStormHeavyFreezingSprayExtremeColdWindChillColdWaveHeavySnowAlertLakeEffectBlowingSnowSnowSquallLakeEffectSnowWinterWeatherSleetSnowfallSnowAndBlowingSnowBlowingSnowSnowAlertArcticOutflowFreezingDrizzleStormStormSurgeRainfallArealFloodCoastalFloodLakeshoreFloodExcessiveHeatHeatWeatherHighHeatAndHumidityHumidexAndHealthHumidexGaleFreezingSpraySpecialMarineSquallStrongWindLakeWindMarineWeatherWindSmallCraftHazardousSeasHazardousSeasSmallCraftSmallCraftWindsSmallCraftRoughBarHighWaterLevelAshfallFreezingFogDenseFogDenseSmokeBlowingDustHardFreezeFreezeFrostFireWeatherFloodRipTideHighSurfSmogAirQualityBriskWindAirStagnationLowWaterHydrologicalSpecialWeather"
	_WeatherSevereType_name_1 = "Invalid"
)

var (
	_WeatherSevereType_index_0 = [...]uint16{0, 11, 18, 25, 34, 45, 52, 67, 85, 95, 113, 128, 141, 150, 160, 173, 192, 200, 208, 220, 230, 241, 250, 258, 269, 287, 298, 307, 315, 329, 350, 360, 374, 387, 392, 400, 418, 429, 438, 451, 466, 471, 481, 489, 499, 511, 525, 538, 542, 549, 568, 584, 591, 595, 608, 621, 627, 637, 645, 658, 662, 685, 698, 708, 723, 741, 755, 762, 773, 781, 791, 802, 812, 818, 823, 834, 839, 846, 854, 858, 868, 877, 890, 898, 910, 924}
	_WeatherSevereType_index_1 = [...]uint8{0, 7}
)

func (i WeatherSevereType) String() string {
	switch {
	case 0 <= i && i <= 84:
		return _WeatherSevereType_name_0[_WeatherSevereType_index_0[i]:_WeatherSevereType_index_0[i+1]]
	case i == 255:
		return _WeatherSevereType_name_1
	default:
		return fmt.Sprintf("WeatherSevereType(%d)", i)
	}
}

const (
	_WeatherSeverity_name_0 = "UnknownWarningWatchAdvisoryStatement"
	_WeatherSeverity_name_1 = "Invalid"
)

var (
	_WeatherSeverity_index_0 = [...]uint8{0, 7, 14, 19, 27, 36}
	_WeatherSeverity_index_1 = [...]uint8{0, 7}
)

func (i WeatherSeverity) String() string {
	switch {
	case 0 <= i && i <= 4:
		return _WeatherSeverity_name_0[_WeatherSeverity_index_0[i]:_WeatherSeverity_index_0[i+1]]
	case i == 255:
		return _WeatherSeverity_name_1
	default:
		return fmt.Sprintf("WeatherSeverity(%d)", i)
	}
}

const (
	_WeatherStatus_name_0 = "ClearPartlyCloudyMostlyCloudyRainSnowWindyThunderstormsWintryMixFog"
	_WeatherStatus_name_1 = "HazyHailScatteredShowersScatteredThunderstormsUnknownPrecipitationLightRainHeavyRainLightSnowHeavySnowLightRainSnowHeavyRainSnowCloudy"
	_WeatherStatus_name_2 = "Invalid"
)

var (
	_WeatherStatus_index_0 = [...]uint8{0, 5, 17, 29, 33, 37, 42, 55, 64, 67}
	_WeatherStatus_index_1 = [...]uint8{0, 4, 8, 24, 46, 66, 75, 84, 93, 102, 115, 128, 134}
	_WeatherStatus_index_2 = [...]uint8{0, 7}
)

func (i WeatherStatus) String() string {
	switch {
	case 0 <= i && i <= 8:
		return _WeatherStatus_name_0[_WeatherStatus_index_0[i]:_WeatherStatus_index_0[i+1]]
	case 11 <= i && i <= 22:
		i -= 11
		return _WeatherStatus_name_1[_WeatherStatus_index_1[i]:_WeatherStatus_index_1[i+1]]
	case i == 255:
		return _WeatherStatus_name_2
	default:
		return fmt.Sprintf("WeatherStatus(%d)", i)
	}
}

const _Weight_name = "CalculatingInvalid"

var _Weight_index = [...]uint8{0, 11, 18}

func (i Weight) String() string {
	i -= 65534
	if i >= Weight(len(_Weight_index)-1) {
		return fmt.Sprintf("Weight(%d)", i+65534)
	}
	return _Weight_name[_Weight_index[i]:_Weight_index[i+1]]
}

const (
	_WktStepDuration_name_0 = "TimeDistanceHrLessThanHrGreaterThanCaloriesOpenRepeatUntilStepsCmpltRepeatUntilTimeRepeatUntilDistanceRepeatUntilCaloriesRepeatUntilHrLessThanRepeatUntilHrGreaterThanRepeatUntilPowerLessThanRepeatUntilPowerGreaterThanPowerLessThanPowerGreaterThanTrainingPeaksTssRepeatUntilPowerLastLapLessThanRepeatUntilMaxPowerLastLapLessThanPower3sLessThanPower10sLessThanPower30sLessThanPower3sGreaterThanPower10sGreaterThanPower30sGreaterThanPowerLapLessThanPowerLapGreaterThanRepeatUntilTrainingPeaksTssRepetitionTime"
	_WktStepDuration_name_1 = "Invalid"
)

var (
	_WktStepDuration_index_0 = [...]uint16{0, 4, 12, 22, 35, 43, 47, 68, 83, 102, 121, 142, 166, 190, 217, 230, 246, 262, 293, 327, 342, 358, 374, 392, 411, 430, 446, 465, 492, 506}
	_WktStepDuration_index_1 = [...]uint8{0, 7}
)

func (i WktStepDuration) String() string {
	switch {
	case 0 <= i && i <= 28:
		return _WktStepDuration_name_0[_WktStepDuration_index_0[i]:_WktStepDuration_index_0[i+1]]
	case i == 255:
		return _WktStepDuration_name_1
	default:
		return fmt.Sprintf("WktStepDuration(%d)", i)
	}
}

const (
	_WktStepTarget_name_0 = "SpeedHeartRateOpenCadencePowerGradeResistancePower3sPower10sPower30sPowerLapSwimStrokeSpeedLapHeartRateLap"
	_WktStepTarget_name_1 = "Invalid"
)

var (
	_WktStepTarget_index_0 = [...]uint8{0, 5, 14, 18, 25, 30, 35, 45, 52, 60, 68, 76, 86, 94, 106}
	_WktStepTarget_index_1 = [...]uint8{0, 7}
)

func (i WktStepTarget) String() string {
	switch {
	case 0 <= i && i <= 13:
		return _WktStepTarget_name_0[_WktStepTarget_index_0[i]:_WktStepTarget_index_0[i+1]]
	case i == 255:
		return _WktStepTarget_name_1
	default:
		return fmt.Sprintf("WktStepTarget(%d)", i)
	}
}

const _WorkoutCapabilities_name = "InvalidIntervalCustomFitnessEquipmentFirstbeatNewLeafTcxSpeedHeartRateDistanceCadencePowerGradeResistanceProtected"

var _WorkoutCapabilities_map = map[WorkoutCapabilities]string{
	0:     _WorkoutCapabilities_name[0:7],
	1:     _WorkoutCapabilities_name[7:15],
	2:     _WorkoutCapabilities_name[15:21],
	4:     _WorkoutCapabilities_name[21:37],
	8:     _WorkoutCapabilities_name[37:46],
	16:    _WorkoutCapabilities_name[46:53],
	32:    _WorkoutCapabilities_name[53:56],
	128:   _WorkoutCapabilities_name[56:61],
	256:   _WorkoutCapabilities_name[61:70],
	512:   _WorkoutCapabilities_name[70:78],
	1024:  _WorkoutCapabilities_name[78:85],
	2048:  _WorkoutCapabilities_name[85:90],
	4096:  _WorkoutCapabilities_name[90:95],
	8192:  _WorkoutCapabilities_name[95:105],
	16384: _WorkoutCapabilities_name[105:114],
}

func (i WorkoutCapabilities) String() string {
	if str, ok := _WorkoutCapabilities_map[i]; ok {
		return str
	}
	return fmt.Sprintf("WorkoutCapabilities(%d)", i)
}

const (
	_WorkoutEquipment_name_0 = "NoneSwimFinsSwimKickboardSwimPaddlesSwimPullBuoySwimSnorkel"
	_WorkoutEquipment_name_1 = "Invalid"
)

var (
	_WorkoutEquipment_index_0 = [...]uint8{0, 4, 12, 25, 36, 48, 59}
	_WorkoutEquipment_index_1 = [...]uint8{0, 7}
)

func (i WorkoutEquipment) String() string {
	switch {
	case 0 <= i && i <= 5:
		return _WorkoutEquipment_name_0[_WorkoutEquipment_index_0[i]:_WorkoutEquipment_index_0[i+1]]
	case i == 255:
		return _WorkoutEquipment_name_1
	default:
		return fmt.Sprintf("WorkoutEquipment(%d)", i)
	}
}

const (
	_WorkoutHr_name_0 = "BpmOffset"
	_WorkoutHr_name_1 = "Invalid"
)

var (
	_WorkoutHr_index_0 = [...]uint8{0, 9}
	_WorkoutHr_index_1 = [...]uint8{0, 7}
)

func (i WorkoutHr) String() string {
	switch {
	case i == 100:
		return _WorkoutHr_name_0
	case i == 4294967295:
		return _WorkoutHr_name_1
	default:
		return fmt.Sprintf("WorkoutHr(%d)", i)
	}
}

const (
	_WorkoutPower_name_0 = "WattsOffset"
	_WorkoutPower_name_1 = "Invalid"
)

var (
	_WorkoutPower_index_0 = [...]uint8{0, 11}
	_WorkoutPower_index_1 = [...]uint8{0, 7}
)

func (i WorkoutPower) String() string {
	switch {
	case i == 1000:
		return _WorkoutPower_name_0
	case i == 4294967295:
		return _WorkoutPower_name_1
	default:
		return fmt.Sprintf("WorkoutPower(%d)", i)
	}
}
